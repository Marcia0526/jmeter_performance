/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 276.0, "minX": 0.0, "maxY": 104702.0, "series": [{"data": [[0.0, 276.0], [0.1, 278.0], [0.2, 279.0], [0.3, 279.0], [0.4, 280.0], [0.5, 280.0], [0.6, 281.0], [0.7, 281.0], [0.8, 281.0], [0.9, 282.0], [1.0, 282.0], [1.1, 282.0], [1.2, 283.0], [1.3, 283.0], [1.4, 283.0], [1.5, 284.0], [1.6, 284.0], [1.7, 284.0], [1.8, 285.0], [1.9, 285.0], [2.0, 285.0], [2.1, 286.0], [2.2, 286.0], [2.3, 286.0], [2.4, 286.0], [2.5, 287.0], [2.6, 287.0], [2.7, 287.0], [2.8, 287.0], [2.9, 288.0], [3.0, 288.0], [3.1, 288.0], [3.2, 288.0], [3.3, 289.0], [3.4, 289.0], [3.5, 289.0], [3.6, 290.0], [3.7, 290.0], [3.8, 290.0], [3.9, 291.0], [4.0, 291.0], [4.1, 291.0], [4.2, 292.0], [4.3, 292.0], [4.4, 292.0], [4.5, 293.0], [4.6, 293.0], [4.7, 293.0], [4.8, 294.0], [4.9, 294.0], [5.0, 294.0], [5.1, 294.0], [5.2, 295.0], [5.3, 295.0], [5.4, 295.0], [5.5, 296.0], [5.6, 296.0], [5.7, 296.0], [5.8, 297.0], [5.9, 297.0], [6.0, 297.0], [6.1, 298.0], [6.2, 298.0], [6.3, 298.0], [6.4, 299.0], [6.5, 299.0], [6.6, 300.0], [6.7, 300.0], [6.8, 300.0], [6.9, 301.0], [7.0, 301.0], [7.1, 301.0], [7.2, 302.0], [7.3, 302.0], [7.4, 303.0], [7.5, 303.0], [7.6, 304.0], [7.7, 305.0], [7.8, 305.0], [7.9, 306.0], [8.0, 306.0], [8.1, 307.0], [8.2, 307.0], [8.3, 308.0], [8.4, 308.0], [8.5, 309.0], [8.6, 310.0], [8.7, 311.0], [8.8, 312.0], [8.9, 312.0], [9.0, 313.0], [9.1, 314.0], [9.2, 314.0], [9.3, 315.0], [9.4, 316.0], [9.5, 317.0], [9.6, 317.0], [9.7, 318.0], [9.8, 319.0], [9.9, 319.0], [10.0, 320.0], [10.1, 321.0], [10.2, 322.0], [10.3, 322.0], [10.4, 323.0], [10.5, 324.0], [10.6, 325.0], [10.7, 325.0], [10.8, 326.0], [10.9, 327.0], [11.0, 328.0], [11.1, 328.0], [11.2, 329.0], [11.3, 330.0], [11.4, 331.0], [11.5, 332.0], [11.6, 333.0], [11.7, 333.0], [11.8, 334.0], [11.9, 335.0], [12.0, 336.0], [12.1, 337.0], [12.2, 338.0], [12.3, 339.0], [12.4, 340.0], [12.5, 341.0], [12.6, 341.0], [12.7, 342.0], [12.8, 343.0], [12.9, 344.0], [13.0, 345.0], [13.1, 346.0], [13.2, 347.0], [13.3, 347.0], [13.4, 348.0], [13.5, 349.0], [13.6, 350.0], [13.7, 351.0], [13.8, 352.0], [13.9, 353.0], [14.0, 354.0], [14.1, 355.0], [14.2, 356.0], [14.3, 357.0], [14.4, 358.0], [14.5, 359.0], [14.6, 360.0], [14.7, 362.0], [14.8, 362.0], [14.9, 364.0], [15.0, 365.0], [15.1, 367.0], [15.2, 368.0], [15.3, 369.0], [15.4, 371.0], [15.5, 372.0], [15.6, 373.0], [15.7, 374.0], [15.8, 376.0], [15.9, 377.0], [16.0, 379.0], [16.1, 380.0], [16.2, 381.0], [16.3, 383.0], [16.4, 384.0], [16.5, 385.0], [16.6, 387.0], [16.7, 389.0], [16.8, 390.0], [16.9, 391.0], [17.0, 393.0], [17.1, 394.0], [17.2, 396.0], [17.3, 397.0], [17.4, 398.0], [17.5, 399.0], [17.6, 401.0], [17.7, 402.0], [17.8, 403.0], [17.9, 405.0], [18.0, 407.0], [18.1, 409.0], [18.2, 410.0], [18.3, 412.0], [18.4, 414.0], [18.5, 415.0], [18.6, 417.0], [18.7, 418.0], [18.8, 420.0], [18.9, 422.0], [19.0, 424.0], [19.1, 425.0], [19.2, 427.0], [19.3, 428.0], [19.4, 429.0], [19.5, 431.0], [19.6, 433.0], [19.7, 434.0], [19.8, 436.0], [19.9, 438.0], [20.0, 439.0], [20.1, 440.0], [20.2, 442.0], [20.3, 445.0], [20.4, 447.0], [20.5, 448.0], [20.6, 450.0], [20.7, 451.0], [20.8, 453.0], [20.9, 455.0], [21.0, 456.0], [21.1, 457.0], [21.2, 459.0], [21.3, 460.0], [21.4, 462.0], [21.5, 463.0], [21.6, 464.0], [21.7, 466.0], [21.8, 467.0], [21.9, 469.0], [22.0, 471.0], [22.1, 472.0], [22.2, 473.0], [22.3, 474.0], [22.4, 476.0], [22.5, 477.0], [22.6, 478.0], [22.7, 478.0], [22.8, 479.0], [22.9, 480.0], [23.0, 481.0], [23.1, 482.0], [23.2, 482.0], [23.3, 483.0], [23.4, 484.0], [23.5, 484.0], [23.6, 485.0], [23.7, 486.0], [23.8, 486.0], [23.9, 487.0], [24.0, 488.0], [24.1, 488.0], [24.2, 489.0], [24.3, 490.0], [24.4, 490.0], [24.5, 491.0], [24.6, 492.0], [24.7, 492.0], [24.8, 493.0], [24.9, 494.0], [25.0, 494.0], [25.1, 495.0], [25.2, 496.0], [25.3, 496.0], [25.4, 497.0], [25.5, 498.0], [25.6, 498.0], [25.7, 499.0], [25.8, 500.0], [25.9, 500.0], [26.0, 501.0], [26.1, 502.0], [26.2, 502.0], [26.3, 503.0], [26.4, 503.0], [26.5, 504.0], [26.6, 505.0], [26.7, 505.0], [26.8, 506.0], [26.9, 507.0], [27.0, 508.0], [27.1, 508.0], [27.2, 509.0], [27.3, 510.0], [27.4, 511.0], [27.5, 511.0], [27.6, 512.0], [27.7, 513.0], [27.8, 513.0], [27.9, 514.0], [28.0, 514.0], [28.1, 515.0], [28.2, 516.0], [28.3, 517.0], [28.4, 517.0], [28.5, 518.0], [28.6, 519.0], [28.7, 520.0], [28.8, 521.0], [28.9, 521.0], [29.0, 522.0], [29.1, 523.0], [29.2, 524.0], [29.3, 525.0], [29.4, 526.0], [29.5, 526.0], [29.6, 527.0], [29.7, 528.0], [29.8, 529.0], [29.9, 530.0], [30.0, 530.0], [30.1, 531.0], [30.2, 532.0], [30.3, 532.0], [30.4, 533.0], [30.5, 534.0], [30.6, 536.0], [30.7, 536.0], [30.8, 537.0], [30.9, 538.0], [31.0, 539.0], [31.1, 540.0], [31.2, 541.0], [31.3, 542.0], [31.4, 543.0], [31.5, 544.0], [31.6, 545.0], [31.7, 546.0], [31.8, 547.0], [31.9, 548.0], [32.0, 549.0], [32.1, 551.0], [32.2, 552.0], [32.3, 552.0], [32.4, 553.0], [32.5, 554.0], [32.6, 555.0], [32.7, 557.0], [32.8, 558.0], [32.9, 559.0], [33.0, 560.0], [33.1, 561.0], [33.2, 561.0], [33.3, 563.0], [33.4, 564.0], [33.5, 565.0], [33.6, 566.0], [33.7, 567.0], [33.8, 569.0], [33.9, 570.0], [34.0, 572.0], [34.1, 573.0], [34.2, 574.0], [34.3, 575.0], [34.4, 576.0], [34.5, 577.0], [34.6, 579.0], [34.7, 580.0], [34.8, 581.0], [34.9, 583.0], [35.0, 584.0], [35.1, 586.0], [35.2, 587.0], [35.3, 589.0], [35.4, 590.0], [35.5, 592.0], [35.6, 594.0], [35.7, 596.0], [35.8, 597.0], [35.9, 598.0], [36.0, 600.0], [36.1, 601.0], [36.2, 602.0], [36.3, 603.0], [36.4, 605.0], [36.5, 606.0], [36.6, 608.0], [36.7, 609.0], [36.8, 611.0], [36.9, 612.0], [37.0, 614.0], [37.1, 615.0], [37.2, 616.0], [37.3, 617.0], [37.4, 618.0], [37.5, 620.0], [37.6, 621.0], [37.7, 623.0], [37.8, 624.0], [37.9, 626.0], [38.0, 627.0], [38.1, 628.0], [38.2, 629.0], [38.3, 631.0], [38.4, 633.0], [38.5, 634.0], [38.6, 636.0], [38.7, 637.0], [38.8, 639.0], [38.9, 641.0], [39.0, 643.0], [39.1, 645.0], [39.2, 647.0], [39.3, 649.0], [39.4, 650.0], [39.5, 651.0], [39.6, 653.0], [39.7, 655.0], [39.8, 658.0], [39.9, 660.0], [40.0, 661.0], [40.1, 662.0], [40.2, 663.0], [40.3, 664.0], [40.4, 665.0], [40.5, 667.0], [40.6, 668.0], [40.7, 670.0], [40.8, 671.0], [40.9, 673.0], [41.0, 674.0], [41.1, 676.0], [41.2, 677.0], [41.3, 679.0], [41.4, 681.0], [41.5, 682.0], [41.6, 683.0], [41.7, 684.0], [41.8, 685.0], [41.9, 687.0], [42.0, 688.0], [42.1, 689.0], [42.2, 690.0], [42.3, 691.0], [42.4, 692.0], [42.5, 693.0], [42.6, 694.0], [42.7, 695.0], [42.8, 697.0], [42.9, 698.0], [43.0, 699.0], [43.1, 699.0], [43.2, 701.0], [43.3, 702.0], [43.4, 703.0], [43.5, 705.0], [43.6, 706.0], [43.7, 708.0], [43.8, 709.0], [43.9, 710.0], [44.0, 711.0], [44.1, 712.0], [44.2, 713.0], [44.3, 714.0], [44.4, 715.0], [44.5, 716.0], [44.6, 718.0], [44.7, 719.0], [44.8, 721.0], [44.9, 722.0], [45.0, 723.0], [45.1, 724.0], [45.2, 725.0], [45.3, 726.0], [45.4, 727.0], [45.5, 728.0], [45.6, 729.0], [45.7, 730.0], [45.8, 731.0], [45.9, 732.0], [46.0, 734.0], [46.1, 735.0], [46.2, 736.0], [46.3, 737.0], [46.4, 738.0], [46.5, 739.0], [46.6, 740.0], [46.7, 742.0], [46.8, 743.0], [46.9, 744.0], [47.0, 745.0], [47.1, 746.0], [47.2, 748.0], [47.3, 749.0], [47.4, 750.0], [47.5, 751.0], [47.6, 753.0], [47.7, 754.0], [47.8, 755.0], [47.9, 756.0], [48.0, 757.0], [48.1, 759.0], [48.2, 760.0], [48.3, 762.0], [48.4, 763.0], [48.5, 765.0], [48.6, 766.0], [48.7, 767.0], [48.8, 769.0], [48.9, 770.0], [49.0, 772.0], [49.1, 773.0], [49.2, 774.0], [49.3, 776.0], [49.4, 777.0], [49.5, 778.0], [49.6, 779.0], [49.7, 781.0], [49.8, 783.0], [49.9, 784.0], [50.0, 786.0], [50.1, 787.0], [50.2, 788.0], [50.3, 790.0], [50.4, 791.0], [50.5, 793.0], [50.6, 794.0], [50.7, 797.0], [50.8, 798.0], [50.9, 800.0], [51.0, 801.0], [51.1, 802.0], [51.2, 804.0], [51.3, 805.0], [51.4, 807.0], [51.5, 808.0], [51.6, 810.0], [51.7, 812.0], [51.8, 813.0], [51.9, 814.0], [52.0, 815.0], [52.1, 817.0], [52.2, 818.0], [52.3, 819.0], [52.4, 820.0], [52.5, 823.0], [52.6, 824.0], [52.7, 826.0], [52.8, 827.0], [52.9, 829.0], [53.0, 830.0], [53.1, 832.0], [53.2, 834.0], [53.3, 835.0], [53.4, 837.0], [53.5, 839.0], [53.6, 841.0], [53.7, 843.0], [53.8, 844.0], [53.9, 846.0], [54.0, 847.0], [54.1, 849.0], [54.2, 851.0], [54.3, 853.0], [54.4, 854.0], [54.5, 855.0], [54.6, 857.0], [54.7, 858.0], [54.8, 860.0], [54.9, 862.0], [55.0, 863.0], [55.1, 865.0], [55.2, 867.0], [55.3, 868.0], [55.4, 871.0], [55.5, 873.0], [55.6, 875.0], [55.7, 876.0], [55.8, 878.0], [55.9, 879.0], [56.0, 880.0], [56.1, 882.0], [56.2, 883.0], [56.3, 885.0], [56.4, 886.0], [56.5, 888.0], [56.6, 890.0], [56.7, 892.0], [56.8, 893.0], [56.9, 895.0], [57.0, 897.0], [57.1, 898.0], [57.2, 900.0], [57.3, 901.0], [57.4, 904.0], [57.5, 906.0], [57.6, 908.0], [57.7, 910.0], [57.8, 912.0], [57.9, 914.0], [58.0, 915.0], [58.1, 917.0], [58.2, 918.0], [58.3, 919.0], [58.4, 921.0], [58.5, 923.0], [58.6, 925.0], [58.7, 927.0], [58.8, 929.0], [58.9, 931.0], [59.0, 934.0], [59.1, 935.0], [59.2, 937.0], [59.3, 940.0], [59.4, 942.0], [59.5, 943.0], [59.6, 945.0], [59.7, 947.0], [59.8, 950.0], [59.9, 952.0], [60.0, 953.0], [60.1, 957.0], [60.2, 959.0], [60.3, 960.0], [60.4, 962.0], [60.5, 963.0], [60.6, 966.0], [60.7, 968.0], [60.8, 970.0], [60.9, 973.0], [61.0, 974.0], [61.1, 976.0], [61.2, 978.0], [61.3, 980.0], [61.4, 982.0], [61.5, 984.0], [61.6, 988.0], [61.7, 989.0], [61.8, 992.0], [61.9, 994.0], [62.0, 997.0], [62.1, 999.0], [62.2, 1000.0], [62.3, 1003.0], [62.4, 1006.0], [62.5, 1008.0], [62.6, 1010.0], [62.7, 1011.0], [62.8, 1013.0], [62.9, 1015.0], [63.0, 1016.0], [63.1, 1018.0], [63.2, 1020.0], [63.3, 1022.0], [63.4, 1023.0], [63.5, 1024.0], [63.6, 1027.0], [63.7, 1029.0], [63.8, 1030.0], [63.9, 1032.0], [64.0, 1033.0], [64.1, 1036.0], [64.2, 1038.0], [64.3, 1040.0], [64.4, 1042.0], [64.5, 1043.0], [64.6, 1046.0], [64.7, 1047.0], [64.8, 1049.0], [64.9, 1051.0], [65.0, 1054.0], [65.1, 1056.0], [65.2, 1059.0], [65.3, 1061.0], [65.4, 1063.0], [65.5, 1066.0], [65.6, 1067.0], [65.7, 1069.0], [65.8, 1072.0], [65.9, 1074.0], [66.0, 1077.0], [66.1, 1080.0], [66.2, 1083.0], [66.3, 1086.0], [66.4, 1089.0], [66.5, 1091.0], [66.6, 1095.0], [66.7, 1098.0], [66.8, 1100.0], [66.9, 1103.0], [67.0, 1106.0], [67.1, 1109.0], [67.2, 1112.0], [67.3, 1115.0], [67.4, 1117.0], [67.5, 1120.0], [67.6, 1123.0], [67.7, 1126.0], [67.8, 1128.0], [67.9, 1131.0], [68.0, 1135.0], [68.1, 1139.0], [68.2, 1143.0], [68.3, 1145.0], [68.4, 1149.0], [68.5, 1151.0], [68.6, 1155.0], [68.7, 1158.0], [68.8, 1161.0], [68.9, 1163.0], [69.0, 1166.0], [69.1, 1168.0], [69.2, 1171.0], [69.3, 1174.0], [69.4, 1177.0], [69.5, 1181.0], [69.6, 1183.0], [69.7, 1187.0], [69.8, 1190.0], [69.9, 1193.0], [70.0, 1196.0], [70.1, 1200.0], [70.2, 1202.0], [70.3, 1205.0], [70.4, 1208.0], [70.5, 1211.0], [70.6, 1214.0], [70.7, 1216.0], [70.8, 1220.0], [70.9, 1223.0], [71.0, 1227.0], [71.1, 1230.0], [71.2, 1232.0], [71.3, 1235.0], [71.4, 1238.0], [71.5, 1240.0], [71.6, 1244.0], [71.7, 1246.0], [71.8, 1249.0], [71.9, 1251.0], [72.0, 1257.0], [72.1, 1260.0], [72.2, 1264.0], [72.3, 1268.0], [72.4, 1272.0], [72.5, 1274.0], [72.6, 1276.0], [72.7, 1279.0], [72.8, 1282.0], [72.9, 1284.0], [73.0, 1288.0], [73.1, 1291.0], [73.2, 1293.0], [73.3, 1295.0], [73.4, 1299.0], [73.5, 1301.0], [73.6, 1305.0], [73.7, 1308.0], [73.8, 1311.0], [73.9, 1316.0], [74.0, 1319.0], [74.1, 1322.0], [74.2, 1325.0], [74.3, 1327.0], [74.4, 1331.0], [74.5, 1333.0], [74.6, 1337.0], [74.7, 1340.0], [74.8, 1344.0], [74.9, 1347.0], [75.0, 1351.0], [75.1, 1353.0], [75.2, 1356.0], [75.3, 1359.0], [75.4, 1364.0], [75.5, 1368.0], [75.6, 1373.0], [75.7, 1377.0], [75.8, 1380.0], [75.9, 1383.0], [76.0, 1386.0], [76.1, 1390.0], [76.2, 1394.0], [76.3, 1398.0], [76.4, 1404.0], [76.5, 1407.0], [76.6, 1410.0], [76.7, 1414.0], [76.8, 1418.0], [76.9, 1422.0], [77.0, 1426.0], [77.1, 1430.0], [77.2, 1434.0], [77.3, 1437.0], [77.4, 1439.0], [77.5, 1442.0], [77.6, 1446.0], [77.7, 1450.0], [77.8, 1455.0], [77.9, 1459.0], [78.0, 1462.0], [78.1, 1467.0], [78.2, 1470.0], [78.3, 1476.0], [78.4, 1480.0], [78.5, 1484.0], [78.6, 1489.0], [78.7, 1492.0], [78.8, 1497.0], [78.9, 1502.0], [79.0, 1506.0], [79.1, 1509.0], [79.2, 1512.0], [79.3, 1516.0], [79.4, 1521.0], [79.5, 1525.0], [79.6, 1530.0], [79.7, 1535.0], [79.8, 1539.0], [79.9, 1543.0], [80.0, 1549.0], [80.1, 1555.0], [80.2, 1560.0], [80.3, 1566.0], [80.4, 1572.0], [80.5, 1577.0], [80.6, 1582.0], [80.7, 1586.0], [80.8, 1591.0], [80.9, 1596.0], [81.0, 1600.0], [81.1, 1606.0], [81.2, 1612.0], [81.3, 1619.0], [81.4, 1623.0], [81.5, 1628.0], [81.6, 1633.0], [81.7, 1638.0], [81.8, 1641.0], [81.9, 1647.0], [82.0, 1651.0], [82.1, 1656.0], [82.2, 1663.0], [82.3, 1666.0], [82.4, 1673.0], [82.5, 1676.0], [82.6, 1680.0], [82.7, 1684.0], [82.8, 1688.0], [82.9, 1693.0], [83.0, 1697.0], [83.1, 1703.0], [83.2, 1708.0], [83.3, 1715.0], [83.4, 1719.0], [83.5, 1724.0], [83.6, 1730.0], [83.7, 1735.0], [83.8, 1739.0], [83.9, 1746.0], [84.0, 1754.0], [84.1, 1762.0], [84.2, 1771.0], [84.3, 1776.0], [84.4, 1784.0], [84.5, 1789.0], [84.6, 1796.0], [84.7, 1802.0], [84.8, 1807.0], [84.9, 1814.0], [85.0, 1823.0], [85.1, 1832.0], [85.2, 1839.0], [85.3, 1847.0], [85.4, 1852.0], [85.5, 1861.0], [85.6, 1871.0], [85.7, 1880.0], [85.8, 1887.0], [85.9, 1895.0], [86.0, 1901.0], [86.1, 1906.0], [86.2, 1912.0], [86.3, 1919.0], [86.4, 1928.0], [86.5, 1936.0], [86.6, 1944.0], [86.7, 1954.0], [86.8, 1961.0], [86.9, 1969.0], [87.0, 1979.0], [87.1, 1987.0], [87.2, 1997.0], [87.3, 2004.0], [87.4, 2010.0], [87.5, 2024.0], [87.6, 2042.0], [87.7, 2051.0], [87.8, 2060.0], [87.9, 2068.0], [88.0, 2083.0], [88.1, 2092.0], [88.2, 2099.0], [88.3, 2111.0], [88.4, 2122.0], [88.5, 2136.0], [88.6, 2146.0], [88.7, 2154.0], [88.8, 2164.0], [88.9, 2171.0], [89.0, 2179.0], [89.1, 2187.0], [89.2, 2194.0], [89.3, 2207.0], [89.4, 2217.0], [89.5, 2234.0], [89.6, 2246.0], [89.7, 2260.0], [89.8, 2274.0], [89.9, 2292.0], [90.0, 2305.0], [90.1, 2318.0], [90.2, 2332.0], [90.3, 2352.0], [90.4, 2363.0], [90.5, 2376.0], [90.6, 2393.0], [90.7, 2408.0], [90.8, 2423.0], [90.9, 2444.0], [91.0, 2461.0], [91.1, 2478.0], [91.2, 2495.0], [91.3, 2513.0], [91.4, 2531.0], [91.5, 2554.0], [91.6, 2574.0], [91.7, 2595.0], [91.8, 2611.0], [91.9, 2627.0], [92.0, 2648.0], [92.1, 2676.0], [92.2, 2692.0], [92.3, 2712.0], [92.4, 2739.0], [92.5, 2760.0], [92.6, 2781.0], [92.7, 2812.0], [92.8, 2846.0], [92.9, 2873.0], [93.0, 2899.0], [93.1, 2933.0], [93.2, 2960.0], [93.3, 3015.0], [93.4, 3042.0], [93.5, 3066.0], [93.6, 3104.0], [93.7, 3123.0], [93.8, 3151.0], [93.9, 3173.0], [94.0, 3193.0], [94.1, 3222.0], [94.2, 3247.0], [94.3, 3269.0], [94.4, 3296.0], [94.5, 3322.0], [94.6, 3350.0], [94.7, 3377.0], [94.8, 3414.0], [94.9, 3434.0], [95.0, 3465.0], [95.1, 3501.0], [95.2, 3533.0], [95.3, 3556.0], [95.4, 3593.0], [95.5, 3629.0], [95.6, 3670.0], [95.7, 3699.0], [95.8, 3755.0], [95.9, 3786.0], [96.0, 3821.0], [96.1, 3867.0], [96.2, 3900.0], [96.3, 3942.0], [96.4, 3990.0], [96.5, 4048.0], [96.6, 4095.0], [96.7, 4147.0], [96.8, 4217.0], [96.9, 4289.0], [97.0, 4343.0], [97.1, 4393.0], [97.2, 4514.0], [97.3, 4579.0], [97.4, 4657.0], [97.5, 4727.0], [97.6, 4815.0], [97.7, 4912.0], [97.8, 5036.0], [97.9, 5144.0], [98.0, 5217.0], [98.1, 5342.0], [98.2, 5520.0], [98.3, 5646.0], [98.4, 5793.0], [98.5, 5909.0], [98.6, 6043.0], [98.7, 6317.0], [98.8, 6618.0], [98.9, 7094.0], [99.0, 7466.0], [99.1, 7763.0], [99.2, 8161.0], [99.3, 8647.0], [99.4, 9979.0], [99.5, 11041.0], [99.6, 11757.0], [99.7, 15099.0], [99.8, 30671.0], [99.9, 40409.0], [100.0, 104702.0]], "isOverall": false, "label": "Search for Test", "isController": false}, {"data": [[0.0, 1986.0], [0.1, 1986.0], [0.2, 1986.0], [0.3, 1986.0], [0.4, 1986.0], [0.5, 1986.0], [0.6, 1986.0], [0.7, 1986.0], [0.8, 1986.0], [0.9, 1986.0], [1.0, 1986.0], [1.1, 1986.0], [1.2, 1986.0], [1.3, 1986.0], [1.4, 1986.0], [1.5, 1986.0], [1.6, 1986.0], [1.7, 1986.0], [1.8, 1986.0], [1.9, 1986.0], [2.0, 1986.0], [2.1, 1986.0], [2.2, 1986.0], [2.3, 1986.0], [2.4, 1986.0], [2.5, 1986.0], [2.6, 1986.0], [2.7, 1986.0], [2.8, 1986.0], [2.9, 1986.0], [3.0, 1986.0], [3.1, 1986.0], [3.2, 1986.0], [3.3, 1986.0], [3.4, 1986.0], [3.5, 1986.0], [3.6, 1986.0], [3.7, 1986.0], [3.8, 1986.0], [3.9, 1986.0], [4.0, 1986.0], [4.1, 1986.0], [4.2, 1986.0], [4.3, 1986.0], [4.4, 1986.0], [4.5, 1986.0], [4.6, 1986.0], [4.7, 1986.0], [4.8, 1986.0], [4.9, 1986.0], [5.0, 1986.0], [5.1, 1986.0], [5.2, 1986.0], [5.3, 1986.0], [5.4, 1986.0], [5.5, 1986.0], [5.6, 1986.0], [5.7, 1986.0], [5.8, 1986.0], [5.9, 1986.0], [6.0, 1986.0], [6.1, 1986.0], [6.2, 1986.0], [6.3, 1986.0], [6.4, 1986.0], [6.5, 1986.0], [6.6, 1986.0], [6.7, 1986.0], [6.8, 1986.0], [6.9, 1986.0], [7.0, 1986.0], [7.1, 1986.0], [7.2, 1986.0], [7.3, 1986.0], [7.4, 1986.0], [7.5, 1986.0], [7.6, 1986.0], [7.7, 1986.0], [7.8, 1986.0], [7.9, 1986.0], [8.0, 1986.0], [8.1, 1986.0], [8.2, 1986.0], [8.3, 1986.0], [8.4, 1986.0], [8.5, 1986.0], [8.6, 1986.0], [8.7, 1986.0], [8.8, 1986.0], [8.9, 1986.0], [9.0, 1986.0], [9.1, 1986.0], [9.2, 1986.0], [9.3, 1986.0], [9.4, 1986.0], [9.5, 1986.0], [9.6, 1986.0], [9.7, 1986.0], [9.8, 1986.0], [9.9, 1986.0], [10.0, 1986.0], [10.1, 1986.0], [10.2, 1986.0], [10.3, 1986.0], [10.4, 1986.0], [10.5, 1986.0], [10.6, 1986.0], [10.7, 1986.0], [10.8, 1986.0], [10.9, 1986.0], [11.0, 1986.0], [11.1, 1986.0], [11.2, 1986.0], [11.3, 1986.0], [11.4, 1986.0], [11.5, 1986.0], [11.6, 1986.0], [11.7, 1986.0], [11.8, 1986.0], [11.9, 1986.0], [12.0, 1986.0], [12.1, 1986.0], [12.2, 1986.0], [12.3, 1986.0], [12.4, 1986.0], [12.5, 1986.0], [12.6, 1986.0], [12.7, 1986.0], [12.8, 1986.0], [12.9, 1986.0], [13.0, 1986.0], [13.1, 1986.0], [13.2, 1986.0], [13.3, 1986.0], [13.4, 1986.0], [13.5, 1986.0], [13.6, 1986.0], [13.7, 1986.0], [13.8, 1986.0], [13.9, 1986.0], [14.0, 1986.0], [14.1, 1986.0], [14.2, 1986.0], [14.3, 1986.0], [14.4, 1986.0], [14.5, 1986.0], [14.6, 1986.0], [14.7, 1986.0], [14.8, 1986.0], [14.9, 1986.0], [15.0, 1986.0], [15.1, 1986.0], [15.2, 1986.0], [15.3, 1986.0], [15.4, 1986.0], [15.5, 1986.0], [15.6, 1986.0], [15.7, 1986.0], [15.8, 1986.0], [15.9, 1986.0], [16.0, 1986.0], [16.1, 1986.0], [16.2, 1986.0], [16.3, 1986.0], [16.4, 1986.0], [16.5, 1986.0], [16.6, 1986.0], [16.7, 1986.0], [16.8, 1986.0], [16.9, 1986.0], [17.0, 1986.0], [17.1, 1986.0], [17.2, 1986.0], [17.3, 1986.0], [17.4, 1986.0], [17.5, 1986.0], [17.6, 1986.0], [17.7, 1986.0], [17.8, 1986.0], [17.9, 1986.0], [18.0, 1986.0], [18.1, 1986.0], [18.2, 1986.0], [18.3, 1986.0], [18.4, 1986.0], [18.5, 1986.0], [18.6, 1986.0], [18.7, 1986.0], [18.8, 1986.0], [18.9, 1986.0], [19.0, 1986.0], [19.1, 1986.0], [19.2, 1986.0], [19.3, 1986.0], [19.4, 1986.0], [19.5, 1986.0], [19.6, 1986.0], [19.7, 1986.0], [19.8, 1986.0], [19.9, 1986.0], [20.0, 1986.0], [20.1, 1986.0], [20.2, 1986.0], [20.3, 1986.0], [20.4, 1986.0], [20.5, 1986.0], [20.6, 1986.0], [20.7, 1986.0], [20.8, 1986.0], [20.9, 1986.0], [21.0, 1986.0], [21.1, 1986.0], [21.2, 1986.0], [21.3, 1986.0], [21.4, 1986.0], [21.5, 1986.0], [21.6, 1986.0], [21.7, 1986.0], [21.8, 1986.0], [21.9, 1986.0], [22.0, 1986.0], [22.1, 1986.0], [22.2, 1986.0], [22.3, 1986.0], [22.4, 1986.0], [22.5, 1986.0], [22.6, 1986.0], [22.7, 1986.0], [22.8, 1986.0], [22.9, 1986.0], [23.0, 1986.0], [23.1, 1986.0], [23.2, 1986.0], [23.3, 1986.0], [23.4, 1986.0], [23.5, 1986.0], [23.6, 1986.0], [23.7, 1986.0], [23.8, 1986.0], [23.9, 1986.0], [24.0, 1986.0], [24.1, 1986.0], [24.2, 1986.0], [24.3, 1986.0], [24.4, 1986.0], [24.5, 1986.0], [24.6, 1986.0], [24.7, 1986.0], [24.8, 1986.0], [24.9, 1986.0], [25.0, 1986.0], [25.1, 1986.0], [25.2, 1986.0], [25.3, 1986.0], [25.4, 1986.0], [25.5, 1986.0], [25.6, 1986.0], [25.7, 1986.0], [25.8, 1986.0], [25.9, 1986.0], [26.0, 1986.0], [26.1, 1986.0], [26.2, 1986.0], [26.3, 1986.0], [26.4, 1986.0], [26.5, 1986.0], [26.6, 1986.0], [26.7, 1986.0], [26.8, 1986.0], [26.9, 1986.0], [27.0, 1986.0], [27.1, 1986.0], [27.2, 1986.0], [27.3, 1986.0], [27.4, 1986.0], [27.5, 1986.0], [27.6, 1986.0], [27.7, 1986.0], [27.8, 1986.0], [27.9, 1986.0], [28.0, 1986.0], [28.1, 1986.0], [28.2, 1986.0], [28.3, 1986.0], [28.4, 1986.0], [28.5, 1986.0], [28.6, 1986.0], [28.7, 1986.0], [28.8, 1986.0], [28.9, 1986.0], [29.0, 1986.0], [29.1, 1986.0], [29.2, 1986.0], [29.3, 1986.0], [29.4, 1986.0], [29.5, 1986.0], [29.6, 1986.0], [29.7, 1986.0], [29.8, 1986.0], [29.9, 1986.0], [30.0, 1986.0], [30.1, 1986.0], [30.2, 1986.0], [30.3, 1986.0], [30.4, 1986.0], [30.5, 1986.0], [30.6, 1986.0], [30.7, 1986.0], [30.8, 1986.0], [30.9, 1986.0], [31.0, 1986.0], [31.1, 1986.0], [31.2, 1986.0], [31.3, 1986.0], [31.4, 1986.0], [31.5, 1986.0], [31.6, 1986.0], [31.7, 1986.0], [31.8, 1986.0], [31.9, 1986.0], [32.0, 1986.0], [32.1, 1986.0], [32.2, 1986.0], [32.3, 1986.0], [32.4, 1986.0], [32.5, 1986.0], [32.6, 1986.0], [32.7, 1986.0], [32.8, 1986.0], [32.9, 1986.0], [33.0, 1986.0], [33.1, 1986.0], [33.2, 1986.0], [33.3, 1986.0], [33.4, 1986.0], [33.5, 1986.0], [33.6, 1986.0], [33.7, 1986.0], [33.8, 1986.0], [33.9, 1986.0], [34.0, 1986.0], [34.1, 1986.0], [34.2, 1986.0], [34.3, 1986.0], [34.4, 1986.0], [34.5, 1986.0], [34.6, 1986.0], [34.7, 1986.0], [34.8, 1986.0], [34.9, 1986.0], [35.0, 1986.0], [35.1, 1986.0], [35.2, 1986.0], [35.3, 1986.0], [35.4, 1986.0], [35.5, 1986.0], [35.6, 1986.0], [35.7, 1986.0], [35.8, 1986.0], [35.9, 1986.0], [36.0, 1986.0], [36.1, 1986.0], [36.2, 1986.0], [36.3, 1986.0], [36.4, 1986.0], [36.5, 1986.0], [36.6, 1986.0], [36.7, 1986.0], [36.8, 1986.0], [36.9, 1986.0], [37.0, 1986.0], [37.1, 1986.0], [37.2, 1986.0], [37.3, 1986.0], [37.4, 1986.0], [37.5, 1986.0], [37.6, 1986.0], [37.7, 1986.0], [37.8, 1986.0], [37.9, 1986.0], [38.0, 1986.0], [38.1, 1986.0], [38.2, 1986.0], [38.3, 1986.0], [38.4, 1986.0], [38.5, 1986.0], [38.6, 1986.0], [38.7, 1986.0], [38.8, 1986.0], [38.9, 1986.0], [39.0, 1986.0], [39.1, 1986.0], [39.2, 1986.0], [39.3, 1986.0], [39.4, 1986.0], [39.5, 1986.0], [39.6, 1986.0], [39.7, 1986.0], [39.8, 1986.0], [39.9, 1986.0], [40.0, 1986.0], [40.1, 1986.0], [40.2, 1986.0], [40.3, 1986.0], [40.4, 1986.0], [40.5, 1986.0], [40.6, 1986.0], [40.7, 1986.0], [40.8, 1986.0], [40.9, 1986.0], [41.0, 1986.0], [41.1, 1986.0], [41.2, 1986.0], [41.3, 1986.0], [41.4, 1986.0], [41.5, 1986.0], [41.6, 1986.0], [41.7, 1986.0], [41.8, 1986.0], [41.9, 1986.0], [42.0, 1986.0], [42.1, 1986.0], [42.2, 1986.0], [42.3, 1986.0], [42.4, 1986.0], [42.5, 1986.0], [42.6, 1986.0], [42.7, 1986.0], [42.8, 1986.0], [42.9, 1986.0], [43.0, 1986.0], [43.1, 1986.0], [43.2, 1986.0], [43.3, 1986.0], [43.4, 1986.0], [43.5, 1986.0], [43.6, 1986.0], [43.7, 1986.0], [43.8, 1986.0], [43.9, 1986.0], [44.0, 1986.0], [44.1, 1986.0], [44.2, 1986.0], [44.3, 1986.0], [44.4, 1986.0], [44.5, 1986.0], [44.6, 1986.0], [44.7, 1986.0], [44.8, 1986.0], [44.9, 1986.0], [45.0, 1986.0], [45.1, 1986.0], [45.2, 1986.0], [45.3, 1986.0], [45.4, 1986.0], [45.5, 1986.0], [45.6, 1986.0], [45.7, 1986.0], [45.8, 1986.0], [45.9, 1986.0], [46.0, 1986.0], [46.1, 1986.0], [46.2, 1986.0], [46.3, 1986.0], [46.4, 1986.0], [46.5, 1986.0], [46.6, 1986.0], [46.7, 1986.0], [46.8, 1986.0], [46.9, 1986.0], [47.0, 1986.0], [47.1, 1986.0], [47.2, 1986.0], [47.3, 1986.0], [47.4, 1986.0], [47.5, 1986.0], [47.6, 1986.0], [47.7, 1986.0], [47.8, 1986.0], [47.9, 1986.0], [48.0, 1986.0], [48.1, 1986.0], [48.2, 1986.0], [48.3, 1986.0], [48.4, 1986.0], [48.5, 1986.0], [48.6, 1986.0], [48.7, 1986.0], [48.8, 1986.0], [48.9, 1986.0], [49.0, 1986.0], [49.1, 1986.0], [49.2, 1986.0], [49.3, 1986.0], [49.4, 1986.0], [49.5, 1986.0], [49.6, 1986.0], [49.7, 1986.0], [49.8, 1986.0], [49.9, 1986.0], [50.0, 1986.0], [50.1, 1986.0], [50.2, 1986.0], [50.3, 1986.0], [50.4, 1986.0], [50.5, 1986.0], [50.6, 1986.0], [50.7, 1986.0], [50.8, 1986.0], [50.9, 1986.0], [51.0, 1986.0], [51.1, 1986.0], [51.2, 1986.0], [51.3, 1986.0], [51.4, 1986.0], [51.5, 1986.0], [51.6, 1986.0], [51.7, 1986.0], [51.8, 1986.0], [51.9, 1986.0], [52.0, 1986.0], [52.1, 1986.0], [52.2, 1986.0], [52.3, 1986.0], [52.4, 1986.0], [52.5, 1986.0], [52.6, 1986.0], [52.7, 1986.0], [52.8, 1986.0], [52.9, 1986.0], [53.0, 1986.0], [53.1, 1986.0], [53.2, 1986.0], [53.3, 1986.0], [53.4, 1986.0], [53.5, 1986.0], [53.6, 1986.0], [53.7, 1986.0], [53.8, 1986.0], [53.9, 1986.0], [54.0, 1986.0], [54.1, 1986.0], [54.2, 1986.0], [54.3, 1986.0], [54.4, 1986.0], [54.5, 1986.0], [54.6, 1986.0], [54.7, 1986.0], [54.8, 1986.0], [54.9, 1986.0], [55.0, 1986.0], [55.1, 1986.0], [55.2, 1986.0], [55.3, 1986.0], [55.4, 1986.0], [55.5, 1986.0], [55.6, 1986.0], [55.7, 1986.0], [55.8, 1986.0], [55.9, 1986.0], [56.0, 1986.0], [56.1, 1986.0], [56.2, 1986.0], [56.3, 1986.0], [56.4, 1986.0], [56.5, 1986.0], [56.6, 1986.0], [56.7, 1986.0], [56.8, 1986.0], [56.9, 1986.0], [57.0, 1986.0], [57.1, 1986.0], [57.2, 1986.0], [57.3, 1986.0], [57.4, 1986.0], [57.5, 1986.0], [57.6, 1986.0], [57.7, 1986.0], [57.8, 1986.0], [57.9, 1986.0], [58.0, 1986.0], [58.1, 1986.0], [58.2, 1986.0], [58.3, 1986.0], [58.4, 1986.0], [58.5, 1986.0], [58.6, 1986.0], [58.7, 1986.0], [58.8, 1986.0], [58.9, 1986.0], [59.0, 1986.0], [59.1, 1986.0], [59.2, 1986.0], [59.3, 1986.0], [59.4, 1986.0], [59.5, 1986.0], [59.6, 1986.0], [59.7, 1986.0], [59.8, 1986.0], [59.9, 1986.0], [60.0, 1986.0], [60.1, 1986.0], [60.2, 1986.0], [60.3, 1986.0], [60.4, 1986.0], [60.5, 1986.0], [60.6, 1986.0], [60.7, 1986.0], [60.8, 1986.0], [60.9, 1986.0], [61.0, 1986.0], [61.1, 1986.0], [61.2, 1986.0], [61.3, 1986.0], [61.4, 1986.0], [61.5, 1986.0], [61.6, 1986.0], [61.7, 1986.0], [61.8, 1986.0], [61.9, 1986.0], [62.0, 1986.0], [62.1, 1986.0], [62.2, 1986.0], [62.3, 1986.0], [62.4, 1986.0], [62.5, 1986.0], [62.6, 1986.0], [62.7, 1986.0], [62.8, 1986.0], [62.9, 1986.0], [63.0, 1986.0], [63.1, 1986.0], [63.2, 1986.0], [63.3, 1986.0], [63.4, 1986.0], [63.5, 1986.0], [63.6, 1986.0], [63.7, 1986.0], [63.8, 1986.0], [63.9, 1986.0], [64.0, 1986.0], [64.1, 1986.0], [64.2, 1986.0], [64.3, 1986.0], [64.4, 1986.0], [64.5, 1986.0], [64.6, 1986.0], [64.7, 1986.0], [64.8, 1986.0], [64.9, 1986.0], [65.0, 1986.0], [65.1, 1986.0], [65.2, 1986.0], [65.3, 1986.0], [65.4, 1986.0], [65.5, 1986.0], [65.6, 1986.0], [65.7, 1986.0], [65.8, 1986.0], [65.9, 1986.0], [66.0, 1986.0], [66.1, 1986.0], [66.2, 1986.0], [66.3, 1986.0], [66.4, 1986.0], [66.5, 1986.0], [66.6, 1986.0], [66.7, 1986.0], [66.8, 1986.0], [66.9, 1986.0], [67.0, 1986.0], [67.1, 1986.0], [67.2, 1986.0], [67.3, 1986.0], [67.4, 1986.0], [67.5, 1986.0], [67.6, 1986.0], [67.7, 1986.0], [67.8, 1986.0], [67.9, 1986.0], [68.0, 1986.0], [68.1, 1986.0], [68.2, 1986.0], [68.3, 1986.0], [68.4, 1986.0], [68.5, 1986.0], [68.6, 1986.0], [68.7, 1986.0], [68.8, 1986.0], [68.9, 1986.0], [69.0, 1986.0], [69.1, 1986.0], [69.2, 1986.0], [69.3, 1986.0], [69.4, 1986.0], [69.5, 1986.0], [69.6, 1986.0], [69.7, 1986.0], [69.8, 1986.0], [69.9, 1986.0], [70.0, 1986.0], [70.1, 1986.0], [70.2, 1986.0], [70.3, 1986.0], [70.4, 1986.0], [70.5, 1986.0], [70.6, 1986.0], [70.7, 1986.0], [70.8, 1986.0], [70.9, 1986.0], [71.0, 1986.0], [71.1, 1986.0], [71.2, 1986.0], [71.3, 1986.0], [71.4, 1986.0], [71.5, 1986.0], [71.6, 1986.0], [71.7, 1986.0], [71.8, 1986.0], [71.9, 1986.0], [72.0, 1986.0], [72.1, 1986.0], [72.2, 1986.0], [72.3, 1986.0], [72.4, 1986.0], [72.5, 1986.0], [72.6, 1986.0], [72.7, 1986.0], [72.8, 1986.0], [72.9, 1986.0], [73.0, 1986.0], [73.1, 1986.0], [73.2, 1986.0], [73.3, 1986.0], [73.4, 1986.0], [73.5, 1986.0], [73.6, 1986.0], [73.7, 1986.0], [73.8, 1986.0], [73.9, 1986.0], [74.0, 1986.0], [74.1, 1986.0], [74.2, 1986.0], [74.3, 1986.0], [74.4, 1986.0], [74.5, 1986.0], [74.6, 1986.0], [74.7, 1986.0], [74.8, 1986.0], [74.9, 1986.0], [75.0, 1986.0], [75.1, 1986.0], [75.2, 1986.0], [75.3, 1986.0], [75.4, 1986.0], [75.5, 1986.0], [75.6, 1986.0], [75.7, 1986.0], [75.8, 1986.0], [75.9, 1986.0], [76.0, 1986.0], [76.1, 1986.0], [76.2, 1986.0], [76.3, 1986.0], [76.4, 1986.0], [76.5, 1986.0], [76.6, 1986.0], [76.7, 1986.0], [76.8, 1986.0], [76.9, 1986.0], [77.0, 1986.0], [77.1, 1986.0], [77.2, 1986.0], [77.3, 1986.0], [77.4, 1986.0], [77.5, 1986.0], [77.6, 1986.0], [77.7, 1986.0], [77.8, 1986.0], [77.9, 1986.0], [78.0, 1986.0], [78.1, 1986.0], [78.2, 1986.0], [78.3, 1986.0], [78.4, 1986.0], [78.5, 1986.0], [78.6, 1986.0], [78.7, 1986.0], [78.8, 1986.0], [78.9, 1986.0], [79.0, 1986.0], [79.1, 1986.0], [79.2, 1986.0], [79.3, 1986.0], [79.4, 1986.0], [79.5, 1986.0], [79.6, 1986.0], [79.7, 1986.0], [79.8, 1986.0], [79.9, 1986.0], [80.0, 1986.0], [80.1, 1986.0], [80.2, 1986.0], [80.3, 1986.0], [80.4, 1986.0], [80.5, 1986.0], [80.6, 1986.0], [80.7, 1986.0], [80.8, 1986.0], [80.9, 1986.0], [81.0, 1986.0], [81.1, 1986.0], [81.2, 1986.0], [81.3, 1986.0], [81.4, 1986.0], [81.5, 1986.0], [81.6, 1986.0], [81.7, 1986.0], [81.8, 1986.0], [81.9, 1986.0], [82.0, 1986.0], [82.1, 1986.0], [82.2, 1986.0], [82.3, 1986.0], [82.4, 1986.0], [82.5, 1986.0], [82.6, 1986.0], [82.7, 1986.0], [82.8, 1986.0], [82.9, 1986.0], [83.0, 1986.0], [83.1, 1986.0], [83.2, 1986.0], [83.3, 1986.0], [83.4, 1986.0], [83.5, 1986.0], [83.6, 1986.0], [83.7, 1986.0], [83.8, 1986.0], [83.9, 1986.0], [84.0, 1986.0], [84.1, 1986.0], [84.2, 1986.0], [84.3, 1986.0], [84.4, 1986.0], [84.5, 1986.0], [84.6, 1986.0], [84.7, 1986.0], [84.8, 1986.0], [84.9, 1986.0], [85.0, 1986.0], [85.1, 1986.0], [85.2, 1986.0], [85.3, 1986.0], [85.4, 1986.0], [85.5, 1986.0], [85.6, 1986.0], [85.7, 1986.0], [85.8, 1986.0], [85.9, 1986.0], [86.0, 1986.0], [86.1, 1986.0], [86.2, 1986.0], [86.3, 1986.0], [86.4, 1986.0], [86.5, 1986.0], [86.6, 1986.0], [86.7, 1986.0], [86.8, 1986.0], [86.9, 1986.0], [87.0, 1986.0], [87.1, 1986.0], [87.2, 1986.0], [87.3, 1986.0], [87.4, 1986.0], [87.5, 1986.0], [87.6, 1986.0], [87.7, 1986.0], [87.8, 1986.0], [87.9, 1986.0], [88.0, 1986.0], [88.1, 1986.0], [88.2, 1986.0], [88.3, 1986.0], [88.4, 1986.0], [88.5, 1986.0], [88.6, 1986.0], [88.7, 1986.0], [88.8, 1986.0], [88.9, 1986.0], [89.0, 1986.0], [89.1, 1986.0], [89.2, 1986.0], [89.3, 1986.0], [89.4, 1986.0], [89.5, 1986.0], [89.6, 1986.0], [89.7, 1986.0], [89.8, 1986.0], [89.9, 1986.0], [90.0, 1986.0], [90.1, 1986.0], [90.2, 1986.0], [90.3, 1986.0], [90.4, 1986.0], [90.5, 1986.0], [90.6, 1986.0], [90.7, 1986.0], [90.8, 1986.0], [90.9, 1986.0], [91.0, 1986.0], [91.1, 1986.0], [91.2, 1986.0], [91.3, 1986.0], [91.4, 1986.0], [91.5, 1986.0], [91.6, 1986.0], [91.7, 1986.0], [91.8, 1986.0], [91.9, 1986.0], [92.0, 1986.0], [92.1, 1986.0], [92.2, 1986.0], [92.3, 1986.0], [92.4, 1986.0], [92.5, 1986.0], [92.6, 1986.0], [92.7, 1986.0], [92.8, 1986.0], [92.9, 1986.0], [93.0, 1986.0], [93.1, 1986.0], [93.2, 1986.0], [93.3, 1986.0], [93.4, 1986.0], [93.5, 1986.0], [93.6, 1986.0], [93.7, 1986.0], [93.8, 1986.0], [93.9, 1986.0], [94.0, 1986.0], [94.1, 1986.0], [94.2, 1986.0], [94.3, 1986.0], [94.4, 1986.0], [94.5, 1986.0], [94.6, 1986.0], [94.7, 1986.0], [94.8, 1986.0], [94.9, 1986.0], [95.0, 1986.0], [95.1, 1986.0], [95.2, 1986.0], [95.3, 1986.0], [95.4, 1986.0], [95.5, 1986.0], [95.6, 1986.0], [95.7, 1986.0], [95.8, 1986.0], [95.9, 1986.0], [96.0, 1986.0], [96.1, 1986.0], [96.2, 1986.0], [96.3, 1986.0], [96.4, 1986.0], [96.5, 1986.0], [96.6, 1986.0], [96.7, 1986.0], [96.8, 1986.0], [96.9, 1986.0], [97.0, 1986.0], [97.1, 1986.0], [97.2, 1986.0], [97.3, 1986.0], [97.4, 1986.0], [97.5, 1986.0], [97.6, 1986.0], [97.7, 1986.0], [97.8, 1986.0], [97.9, 1986.0], [98.0, 1986.0], [98.1, 1986.0], [98.2, 1986.0], [98.3, 1986.0], [98.4, 1986.0], [98.5, 1986.0], [98.6, 1986.0], [98.7, 1986.0], [98.8, 1986.0], [98.9, 1986.0], [99.0, 1986.0], [99.1, 1986.0], [99.2, 1986.0], [99.3, 1986.0], [99.4, 1986.0], [99.5, 1986.0], [99.6, 1986.0], [99.7, 1986.0], [99.8, 1986.0], [99.9, 1986.0]], "isOverall": false, "label": "Get Access Token ", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 2424.0, "series": [{"data": [[82700.0, 1.0], [92700.0, 1.0], [91900.0, 1.0], [95100.0, 1.0], [104700.0, 1.0], [32900.0, 1.0], [35100.0, 1.0], [36300.0, 1.0], [37900.0, 1.0], [38900.0, 1.0], [40100.0, 1.0], [39300.0, 1.0], [40900.0, 1.0], [42100.0, 1.0], [200.0, 1461.0], [300.0, 2424.0], [101400.0, 1.0], [400.0, 1832.0], [104200.0, 3.0], [500.0, 2264.0], [600.0, 1577.0], [700.0, 1725.0], [800.0, 1401.0], [900.0, 1097.0], [1000.0, 1025.0], [1100.0, 738.0], [1200.0, 737.0], [1300.0, 643.0], [1400.0, 565.0], [1500.0, 468.0], [1600.0, 454.0], [1700.0, 365.0], [1800.0, 290.0], [1900.0, 278.0], [2000.0, 217.0], [2100.0, 229.0], [2300.0, 147.0], [2200.0, 161.0], [2400.0, 129.0], [2500.0, 114.0], [2600.0, 112.0], [2700.0, 94.0], [2800.0, 76.0], [2900.0, 61.0], [3000.0, 67.0], [3100.0, 99.0], [3300.0, 75.0], [3200.0, 85.0], [3400.0, 78.0], [3500.0, 70.0], [3600.0, 65.0], [3700.0, 49.0], [3800.0, 58.0], [3900.0, 51.0], [4000.0, 42.0], [4100.0, 37.0], [4300.0, 43.0], [4200.0, 31.0], [4400.0, 17.0], [4600.0, 27.0], [4500.0, 34.0], [4700.0, 27.0], [4800.0, 23.0], [5100.0, 32.0], [5000.0, 16.0], [4900.0, 19.0], [5300.0, 16.0], [5200.0, 16.0], [84900.0, 1.0], [5500.0, 23.0], [5400.0, 7.0], [5600.0, 17.0], [5800.0, 17.0], [5700.0, 14.0], [92100.0, 1.0], [6100.0, 9.0], [5900.0, 17.0], [6000.0, 20.0], [6300.0, 7.0], [6200.0, 1.0], [100100.0, 1.0], [6500.0, 9.0], [6600.0, 10.0], [6400.0, 4.0], [6700.0, 6.0], [6900.0, 2.0], [6800.0, 3.0], [7100.0, 6.0], [7000.0, 5.0], [7300.0, 11.0], [7200.0, 3.0], [7400.0, 4.0], [7600.0, 10.0], [7500.0, 6.0], [7700.0, 7.0], [7900.0, 4.0], [7800.0, 5.0], [8000.0, 8.0], [8100.0, 4.0], [8200.0, 7.0], [8400.0, 2.0], [8300.0, 7.0], [8600.0, 4.0], [8500.0, 2.0], [8700.0, 2.0], [9200.0, 1.0], [8800.0, 4.0], [8900.0, 2.0], [9100.0, 1.0], [9000.0, 1.0], [9400.0, 2.0], [9700.0, 3.0], [9300.0, 1.0], [9800.0, 1.0], [10000.0, 4.0], [10100.0, 3.0], [10200.0, 1.0], [9900.0, 2.0], [10400.0, 4.0], [10700.0, 1.0], [10600.0, 1.0], [10800.0, 3.0], [11000.0, 7.0], [11100.0, 4.0], [10900.0, 4.0], [11200.0, 2.0], [11600.0, 5.0], [11700.0, 4.0], [11300.0, 4.0], [11400.0, 1.0], [11800.0, 3.0], [11900.0, 2.0], [12000.0, 4.0], [12100.0, 1.0], [12500.0, 1.0], [13600.0, 1.0], [13400.0, 1.0], [14200.0, 2.0], [14300.0, 2.0], [14400.0, 1.0], [15000.0, 1.0], [16300.0, 1.0], [16500.0, 1.0], [17000.0, 1.0], [17900.0, 1.0], [17700.0, 1.0], [18200.0, 1.0], [18900.0, 1.0], [20100.0, 1.0], [21100.0, 1.0], [20500.0, 2.0], [23800.0, 2.0], [23600.0, 1.0], [26400.0, 1.0], [26800.0, 1.0], [28100.0, 4.0], [28900.0, 1.0], [30600.0, 1.0], [30800.0, 2.0], [31000.0, 2.0], [30900.0, 2.0], [32500.0, 1.0], [33600.0, 3.0], [33200.0, 1.0], [34800.0, 1.0], [35800.0, 1.0], [40000.0, 1.0], [40400.0, 2.0], [47200.0, 1.0], [53400.0, 1.0], [58800.0, 1.0], [86000.0, 1.0], [92400.0, 1.0], [93600.0, 1.0], [98000.0, 1.0]], "isOverall": false, "label": "Search for Test", "isController": false}, {"data": [[1900.0, 1.0]], "isOverall": false, "label": "Get Access Token ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 104700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4684.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 11745.0, "series": [{"data": [[0.0, 5747.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 11745.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 4684.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.59607884E12, "maxY": 30.0, "series": [{"data": [[1.59607884E12, 1.0]], "isOverall": false, "label": "setUp Thread Group", "isController": false}, {"data": [[1.59607884E12, 30.0], [1.59607944E12, 30.0], [1.5960795E12, 30.0], [1.59607914E12, 30.0], [1.5960798E12, 9.411764705882351], [1.59607908E12, 30.0], [1.59607968E12, 30.0], [1.59607974E12, 29.554913294797686], [1.59607938E12, 30.0], [1.59607932E12, 30.0], [1.59607962E12, 30.0], [1.59607902E12, 30.0], [1.59607896E12, 30.0], [1.59607926E12, 30.0], [1.5960792E12, 30.0], [1.5960789E12, 30.0], [1.59607956E12, 30.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5960798E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1206.1827418043863, "minX": 1.0, "maxY": 104702.0, "series": [{"data": [[8.0, 98061.0], [2.0, 104702.0], [10.0, 89864.5], [11.0, 91967.0], [12.0, 82796.0], [13.0, 84990.0], [16.0, 92470.33333333333], [1.0, 95118.0], [17.0, 58821.0], [18.0, 40986.0], [19.0, 40412.0], [20.0, 40409.0], [5.0, 104289.66666666667], [21.0, 40042.0], [23.0, 39733.5], [24.0, 38935.0], [6.0, 101489.0], [25.0, 28976.0], [26.0, 37923.0], [27.0, 18961.0], [28.0, 18266.0], [7.0, 100142.0], [29.0, 15099.0], [30.0, 1206.1827418043863]], "isOverall": false, "label": "Search for Test", "isController": false}, {"data": [[29.980744081172485, 1294.236482525364]], "isOverall": false, "label": "Search for Test-Aggregated", "isController": false}, {"data": [[1.0, 1986.0]], "isOverall": false, "label": "Get Access Token ", "isController": false}, {"data": [[1.0, 1986.0]], "isOverall": false, "label": "Get Access Token -Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 30.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 300.15, "minX": 1.59607884E12, "maxY": 1227251.6333333333, "series": [{"data": [[1.59607884E12, 531231.2333333333], [1.59607944E12, 746443.3333333334], [1.5960795E12, 560668.5333333333], [1.59607914E12, 844074.65], [1.5960798E12, 19160.55], [1.59607908E12, 1188286.1], [1.59607968E12, 806690.3333333334], [1.59607974E12, 114861.5], [1.59607938E12, 908503.25], [1.59607932E12, 1098172.9], [1.59607962E12, 1227251.6333333333], [1.59607902E12, 906475.3333333334], [1.59607896E12, 744553.0833333334], [1.59607926E12, 827664.8833333333], [1.5960792E12, 806552.7333333333], [1.5960789E12, 1189081.7], [1.59607956E12, 1014595.95]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.59607884E12, 15457.616666666667], [1.59607944E12, 21818.266666666666], [1.5960795E12, 16059.9], [1.59607914E12, 24443.433333333334], [1.5960798E12, 300.15], [1.59607908E12, 33868.13333333333], [1.59607968E12, 23505.683333333334], [1.59607974E12, 3060.0666666666666], [1.59607938E12, 26417.166666666668], [1.59607932E12, 31706.366666666665], [1.59607962E12, 35658.333333333336], [1.59607902E12, 26942.2], [1.59607896E12, 21103.266666666666], [1.59607926E12, 24012.766666666666], [1.5960792E12, 23481.416666666668], [1.5960789E12, 34847.96666666667], [1.59607956E12, 29446.116666666665]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5960798E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 922.6425384234011, "minX": 1.59607884E12, "maxY": 93417.35294117646, "series": [{"data": [[1.59607884E12, 1434.7505720823794], [1.59607944E12, 1194.42868719611], [1.5960795E12, 2339.3292951541875], [1.59607914E12, 1262.6208393632419], [1.5960798E12, 93417.35294117646], [1.59607908E12, 965.6187989556144], [1.59607968E12, 1349.8645598194153], [1.59607974E12, 3687.8786127167623], [1.59607938E12, 1199.8761713520767], [1.59607932E12, 1043.8761851645286], [1.59607962E12, 922.6425384234011], [1.59607902E12, 1168.9284776902905], [1.59607896E12, 1481.8759430008408], [1.59607926E12, 1276.146539027983], [1.5960792E12, 1392.7100903614462], [1.5960789E12, 930.1486555048199], [1.59607956E12, 1046.899099099099]], "isOverall": false, "label": "Search for Test", "isController": false}, {"data": [[1.59607884E12, 1986.0]], "isOverall": false, "label": "Get Access Token ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5960798E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 644.4754586018829, "minX": 1.59607884E12, "maxY": 12672.882352941177, "series": [{"data": [[1.59607884E12, 1018.1464530892443], [1.59607944E12, 956.5162074554302], [1.5960795E12, 1993.7533039647615], [1.59607914E12, 909.5260492040519], [1.5960798E12, 12672.882352941177], [1.59607908E12, 703.8339425587476], [1.59607968E12, 903.6395786305479], [1.59607974E12, 1533.0693641618498], [1.59607938E12, 848.7496653279779], [1.59607932E12, 773.3273842721688], [1.59607962E12, 644.4754586018829], [1.59607902E12, 840.0334645669293], [1.59607896E12, 954.8910310142488], [1.59607926E12, 883.1237113402067], [1.5960792E12, 956.557228915663], [1.5960789E12, 675.4789446981223], [1.59607956E12, 729.9237237237232]], "isOverall": false, "label": "Search for Test", "isController": false}, {"data": [[1.59607884E12, 1983.0]], "isOverall": false, "label": "Get Access Token ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5960798E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 78.63609320773426, "minX": 1.59607884E12, "maxY": 1401.0, "series": [{"data": [[1.59607884E12, 102.14874141876427], [1.59607944E12, 118.7212317666127], [1.5960795E12, 177.17290748898688], [1.59607914E12, 88.50434153400866], [1.5960798E12, 669.8823529411765], [1.59607908E12, 83.45326370757184], [1.59607968E12, 125.46350639578644], [1.59607974E12, 121.49710982658961], [1.59607938E12, 106.61044176706815], [1.59607932E12, 113.70217512548804], [1.59607962E12, 78.63609320773426], [1.59607902E12, 89.80118110236214], [1.59607896E12, 136.68147527242257], [1.59607926E12, 115.10751104565531], [1.5960792E12, 150.42394578313247], [1.5960789E12, 90.95230847285634], [1.59607956E12, 89.21561561561569]], "isOverall": false, "label": "Search for Test", "isController": false}, {"data": [[1.59607884E12, 1401.0]], "isOverall": false, "label": "Get Access Token ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5960798E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 276.0, "minX": 1.59607884E12, "maxY": 104702.0, "series": [{"data": [[1.59607884E12, 12019.0], [1.59607944E12, 12513.0], [1.5960795E12, 53452.0], [1.59607914E12, 8341.0], [1.5960798E12, 104702.0], [1.59607908E12, 7797.0], [1.59607968E12, 11449.0], [1.59607974E12, 40986.0], [1.59607938E12, 11684.0], [1.59607932E12, 8500.0], [1.59607962E12, 10238.0], [1.59607902E12, 7154.0], [1.59607896E12, 14482.0], [1.59607926E12, 7813.0], [1.5960792E12, 16304.0], [1.5960789E12, 8260.0], [1.59607956E12, 8065.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.59607884E12, 281.0], [1.59607944E12, 281.0], [1.5960795E12, 281.0], [1.59607914E12, 282.0], [1.5960798E12, 58821.0], [1.59607908E12, 281.24399954319], [1.59607968E12, 283.0], [1.59607974E12, 334.3379982161522], [1.59607938E12, 283.0], [1.59607932E12, 284.0], [1.59607962E12, 280.0], [1.59607902E12, 287.0], [1.59607896E12, 287.7459997153282], [1.59607926E12, 288.23099967598915], [1.5960792E12, 282.0], [1.5960789E12, 280.7479995298386], [1.59607956E12, 281.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.59607884E12, 281.0], [1.59607944E12, 281.0], [1.5960795E12, 281.0], [1.59607914E12, 282.6917001318932], [1.5960798E12, 58821.0], [1.59607908E12, 282.0], [1.59607968E12, 283.1670001268387], [1.59607974E12, 341.0718007135391], [1.59607938E12, 283.0], [1.59607932E12, 284.0], [1.59607962E12, 280.0], [1.59607902E12, 287.0], [1.59607896E12, 288.0], [1.59607926E12, 289.0], [1.5960792E12, 282.15710012674333], [1.5960789E12, 281.0], [1.59607956E12, 281.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.59607884E12, 281.0], [1.59607944E12, 281.0], [1.5960795E12, 281.0], [1.59607914E12, 282.13849983513353], [1.5960798E12, 58821.0], [1.59607908E12, 282.0], [1.59607968E12, 283.0], [1.59607974E12, 338.0789991080761], [1.59607938E12, 283.0], [1.59607932E12, 284.0], [1.59607962E12, 280.0], [1.59607902E12, 287.0], [1.59607896E12, 288.0], [1.59607926E12, 288.91049983799456], [1.5960792E12, 282.0], [1.5960789E12, 281.0], [1.59607956E12, 281.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.59607884E12, 277.0], [1.59607944E12, 278.0], [1.5960795E12, 278.0], [1.59607914E12, 276.0], [1.5960798E12, 58821.0], [1.59607908E12, 276.0], [1.59607968E12, 278.0], [1.59607974E12, 310.0], [1.59607938E12, 277.0], [1.59607932E12, 276.0], [1.59607962E12, 276.0], [1.59607902E12, 279.0], [1.59607896E12, 279.0], [1.59607926E12, 280.0], [1.5960792E12, 276.0], [1.5960789E12, 278.0], [1.59607956E12, 277.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.59607884E12, 868.0], [1.59607944E12, 712.5], [1.5960795E12, 753.5], [1.59607914E12, 785.0], [1.5960798E12, 93657.0], [1.59607908E12, 727.0], [1.59607968E12, 882.0], [1.59607974E12, 948.0], [1.59607938E12, 880.5], [1.59607932E12, 756.0], [1.59607962E12, 727.0], [1.59607902E12, 844.0], [1.59607896E12, 943.0], [1.59607926E12, 897.0], [1.5960792E12, 943.5], [1.5960789E12, 678.0], [1.59607956E12, 743.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5960798E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 306.5, "minX": 1.0, "maxY": 7849.0, "series": [{"data": [[2.0, 6381.0], [3.0, 3773.0], [4.0, 2738.0], [5.0, 2188.5], [6.0, 2509.0], [7.0, 3001.5], [8.0, 2555.0], [9.0, 1981.0], [10.0, 1578.0], [11.0, 1588.0], [12.0, 1786.0], [13.0, 1964.0], [14.0, 1657.0], [15.0, 1161.0], [16.0, 1459.5], [17.0, 1378.0], [18.0, 1290.0], [19.0, 1227.0], [20.0, 1281.5], [21.0, 1149.5], [22.0, 1299.5], [23.0, 969.5], [24.0, 983.0], [25.0, 1190.0], [26.0, 1113.5], [27.0, 1028.0], [28.0, 718.0], [29.0, 933.5], [30.0, 895.0], [31.0, 1005.5], [32.0, 842.0], [33.0, 719.0], [35.0, 762.0], [34.0, 745.0], [36.0, 712.0], [37.0, 743.5], [38.0, 619.5], [39.0, 869.5], [41.0, 748.0], [40.0, 735.5], [43.0, 698.0], [42.0, 682.0], [44.0, 736.5], [45.0, 679.0], [46.0, 667.0], [47.0, 614.5], [49.0, 530.0], [48.0, 613.0], [50.0, 585.0], [51.0, 514.0], [53.0, 510.5], [52.0, 521.5], [55.0, 490.0], [54.0, 491.0], [56.0, 510.5], [57.0, 342.5], [59.0, 573.0], [58.0, 487.0], [61.0, 481.0], [60.0, 483.0], [62.0, 489.0], [64.0, 461.5], [66.0, 424.0], [67.0, 330.0], [65.0, 453.0], [69.0, 438.0], [71.0, 429.0], [68.0, 482.5], [74.0, 306.5], [73.0, 403.0], [75.0, 360.0], [76.0, 514.0], [83.0, 319.0], [1.0, 7849.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 83.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 292.0, "minX": 1.0, "maxY": 3434.0, "series": [{"data": [[2.0, 3153.5], [3.0, 2151.5], [4.0, 1282.0], [5.0, 1386.0], [6.0, 1563.0], [7.0, 2027.0], [8.0, 1550.5], [9.0, 1474.0], [10.0, 1023.5], [11.0, 939.0], [12.0, 1313.5], [13.0, 1382.0], [14.0, 1017.0], [15.0, 832.0], [16.0, 972.0], [17.0, 920.5], [18.0, 782.5], [19.0, 804.0], [20.0, 870.0], [21.0, 865.5], [22.0, 851.5], [23.0, 767.5], [24.0, 730.5], [25.0, 829.0], [26.0, 720.0], [27.0, 735.0], [28.0, 544.5], [29.0, 604.5], [30.0, 733.0], [31.0, 720.0], [32.0, 630.5], [33.0, 514.0], [35.0, 576.0], [34.0, 565.0], [36.0, 531.5], [37.0, 573.0], [38.0, 487.5], [39.0, 612.5], [41.0, 573.0], [40.0, 527.5], [43.0, 488.0], [42.0, 501.5], [44.0, 519.5], [45.0, 523.5], [46.0, 495.0], [47.0, 498.5], [49.0, 469.0], [48.0, 470.5], [50.0, 474.0], [51.0, 459.0], [53.0, 455.0], [52.0, 458.0], [55.0, 429.0], [54.0, 425.5], [56.0, 459.0], [57.0, 322.0], [59.0, 488.0], [58.0, 445.5], [61.0, 390.0], [60.0, 375.5], [62.0, 442.5], [64.0, 357.5], [66.0, 414.5], [67.0, 312.0], [65.0, 423.0], [69.0, 389.5], [71.0, 419.0], [68.0, 442.0], [74.0, 295.5], [73.0, 356.0], [75.0, 305.0], [76.0, 458.0], [83.0, 292.0], [1.0, 3434.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 83.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.6666666666666665, "minX": 1.59607884E12, "maxY": 33.61666666666667, "series": [{"data": [[1.59607884E12, 15.083333333333334], [1.59607944E12, 20.566666666666666], [1.5960795E12, 15.133333333333333], [1.59607914E12, 23.033333333333335], [1.59607908E12, 31.916666666666668], [1.59607968E12, 22.15], [1.59607974E12, 2.6666666666666665], [1.59607938E12, 24.9], [1.59607932E12, 29.883333333333333], [1.59607962E12, 33.61666666666667], [1.59607902E12, 25.4], [1.59607896E12, 19.883333333333333], [1.59607926E12, 22.633333333333333], [1.5960792E12, 22.133333333333333], [1.5960789E12, 32.85], [1.59607956E12, 27.75]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59607974E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.2833333333333333, "minX": 1.59607884E12, "maxY": 33.61666666666667, "series": [{"data": [[1.59607884E12, 14.583333333333334], [1.59607944E12, 20.566666666666666], [1.5960795E12, 15.133333333333333], [1.59607914E12, 23.033333333333335], [1.5960798E12, 0.2833333333333333], [1.59607908E12, 31.916666666666668], [1.59607968E12, 22.15], [1.59607974E12, 2.8833333333333333], [1.59607938E12, 24.9], [1.59607932E12, 29.883333333333333], [1.59607962E12, 33.61666666666667], [1.59607902E12, 25.4], [1.59607896E12, 19.883333333333333], [1.59607926E12, 22.633333333333333], [1.5960792E12, 22.133333333333333], [1.5960789E12, 32.85], [1.59607956E12, 27.75]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5960798E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.59607884E12, "maxY": 33.61666666666667, "series": [{"data": [[1.59607884E12, 14.566666666666666], [1.59607944E12, 20.566666666666666], [1.5960795E12, 15.133333333333333], [1.59607914E12, 23.033333333333335], [1.5960798E12, 0.2833333333333333], [1.59607908E12, 31.916666666666668], [1.59607968E12, 22.15], [1.59607974E12, 2.8833333333333333], [1.59607938E12, 24.9], [1.59607932E12, 29.883333333333333], [1.59607962E12, 33.61666666666667], [1.59607902E12, 25.4], [1.59607896E12, 19.883333333333333], [1.59607926E12, 22.633333333333333], [1.5960792E12, 22.133333333333333], [1.5960789E12, 32.85], [1.59607956E12, 27.75]], "isOverall": false, "label": "Search for Test-success", "isController": false}, {"data": [[1.59607884E12, 0.016666666666666666]], "isOverall": false, "label": "Get Access Token -success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5960798E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.2833333333333333, "minX": 1.59607884E12, "maxY": 33.61666666666667, "series": [{"data": [[1.59607884E12, 14.583333333333334], [1.59607944E12, 20.566666666666666], [1.5960795E12, 15.133333333333333], [1.59607914E12, 23.033333333333335], [1.5960798E12, 0.2833333333333333], [1.59607908E12, 31.916666666666668], [1.59607968E12, 22.15], [1.59607974E12, 2.8833333333333333], [1.59607938E12, 24.9], [1.59607932E12, 29.883333333333333], [1.59607962E12, 33.61666666666667], [1.59607902E12, 25.4], [1.59607896E12, 19.883333333333333], [1.59607926E12, 22.633333333333333], [1.5960792E12, 22.133333333333333], [1.5960789E12, 32.85], [1.59607956E12, 27.75]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5960798E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

