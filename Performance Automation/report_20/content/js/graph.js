/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 275.0, "minX": 0.0, "maxY": 21760.0, "series": [{"data": [[0.0, 275.0], [0.1, 277.0], [0.2, 278.0], [0.3, 278.0], [0.4, 279.0], [0.5, 279.0], [0.6, 279.0], [0.7, 280.0], [0.8, 280.0], [0.9, 280.0], [1.0, 280.0], [1.1, 281.0], [1.2, 281.0], [1.3, 281.0], [1.4, 281.0], [1.5, 282.0], [1.6, 282.0], [1.7, 282.0], [1.8, 282.0], [1.9, 282.0], [2.0, 283.0], [2.1, 283.0], [2.2, 283.0], [2.3, 283.0], [2.4, 283.0], [2.5, 283.0], [2.6, 284.0], [2.7, 284.0], [2.8, 284.0], [2.9, 284.0], [3.0, 284.0], [3.1, 285.0], [3.2, 285.0], [3.3, 285.0], [3.4, 285.0], [3.5, 285.0], [3.6, 286.0], [3.7, 286.0], [3.8, 286.0], [3.9, 286.0], [4.0, 286.0], [4.1, 286.0], [4.2, 287.0], [4.3, 287.0], [4.4, 287.0], [4.5, 287.0], [4.6, 287.0], [4.7, 288.0], [4.8, 288.0], [4.9, 288.0], [5.0, 288.0], [5.1, 288.0], [5.2, 289.0], [5.3, 289.0], [5.4, 289.0], [5.5, 289.0], [5.6, 289.0], [5.7, 290.0], [5.8, 290.0], [5.9, 290.0], [6.0, 290.0], [6.1, 291.0], [6.2, 291.0], [6.3, 291.0], [6.4, 291.0], [6.5, 292.0], [6.6, 292.0], [6.7, 292.0], [6.8, 292.0], [6.9, 292.0], [7.0, 293.0], [7.1, 293.0], [7.2, 293.0], [7.3, 293.0], [7.4, 293.0], [7.5, 294.0], [7.6, 294.0], [7.7, 294.0], [7.8, 295.0], [7.9, 295.0], [8.0, 295.0], [8.1, 295.0], [8.2, 296.0], [8.3, 296.0], [8.4, 296.0], [8.5, 296.0], [8.6, 297.0], [8.7, 297.0], [8.8, 297.0], [8.9, 297.0], [9.0, 298.0], [9.1, 298.0], [9.2, 298.0], [9.3, 299.0], [9.4, 299.0], [9.5, 299.0], [9.6, 300.0], [9.7, 300.0], [9.8, 300.0], [9.9, 300.0], [10.0, 301.0], [10.1, 301.0], [10.2, 301.0], [10.3, 302.0], [10.4, 302.0], [10.5, 302.0], [10.6, 303.0], [10.7, 303.0], [10.8, 304.0], [10.9, 304.0], [11.0, 304.0], [11.1, 305.0], [11.2, 305.0], [11.3, 306.0], [11.4, 306.0], [11.5, 307.0], [11.6, 307.0], [11.7, 307.0], [11.8, 308.0], [11.9, 308.0], [12.0, 309.0], [12.1, 309.0], [12.2, 310.0], [12.3, 311.0], [12.4, 311.0], [12.5, 312.0], [12.6, 313.0], [12.7, 313.0], [12.8, 314.0], [12.9, 314.0], [13.0, 315.0], [13.1, 315.0], [13.2, 316.0], [13.3, 316.0], [13.4, 317.0], [13.5, 317.0], [13.6, 318.0], [13.7, 318.0], [13.8, 319.0], [13.9, 319.0], [14.0, 320.0], [14.1, 321.0], [14.2, 321.0], [14.3, 322.0], [14.4, 322.0], [14.5, 323.0], [14.6, 324.0], [14.7, 325.0], [14.8, 325.0], [14.9, 326.0], [15.0, 327.0], [15.1, 327.0], [15.2, 328.0], [15.3, 329.0], [15.4, 329.0], [15.5, 330.0], [15.6, 331.0], [15.7, 332.0], [15.8, 332.0], [15.9, 333.0], [16.0, 334.0], [16.1, 335.0], [16.2, 336.0], [16.3, 337.0], [16.4, 338.0], [16.5, 339.0], [16.6, 340.0], [16.7, 341.0], [16.8, 342.0], [16.9, 343.0], [17.0, 344.0], [17.1, 346.0], [17.2, 347.0], [17.3, 348.0], [17.4, 349.0], [17.5, 350.0], [17.6, 351.0], [17.7, 353.0], [17.8, 354.0], [17.9, 355.0], [18.0, 357.0], [18.1, 359.0], [18.2, 360.0], [18.3, 362.0], [18.4, 364.0], [18.5, 365.0], [18.6, 367.0], [18.7, 369.0], [18.8, 370.0], [18.9, 371.0], [19.0, 373.0], [19.1, 375.0], [19.2, 376.0], [19.3, 378.0], [19.4, 379.0], [19.5, 381.0], [19.6, 383.0], [19.7, 384.0], [19.8, 386.0], [19.9, 387.0], [20.0, 390.0], [20.1, 392.0], [20.2, 394.0], [20.3, 396.0], [20.4, 399.0], [20.5, 400.0], [20.6, 401.0], [20.7, 403.0], [20.8, 405.0], [20.9, 406.0], [21.0, 408.0], [21.1, 410.0], [21.2, 412.0], [21.3, 414.0], [21.4, 415.0], [21.5, 418.0], [21.6, 421.0], [21.7, 422.0], [21.8, 424.0], [21.9, 427.0], [22.0, 430.0], [22.1, 432.0], [22.2, 435.0], [22.3, 437.0], [22.4, 439.0], [22.5, 442.0], [22.6, 444.0], [22.7, 447.0], [22.8, 449.0], [22.9, 451.0], [23.0, 452.0], [23.1, 454.0], [23.2, 458.0], [23.3, 459.0], [23.4, 460.0], [23.5, 462.0], [23.6, 463.0], [23.7, 464.0], [23.8, 466.0], [23.9, 468.0], [24.0, 470.0], [24.1, 472.0], [24.2, 473.0], [24.3, 473.0], [24.4, 474.0], [24.5, 475.0], [24.6, 475.0], [24.7, 476.0], [24.8, 476.0], [24.9, 477.0], [25.0, 477.0], [25.1, 478.0], [25.2, 478.0], [25.3, 479.0], [25.4, 479.0], [25.5, 479.0], [25.6, 480.0], [25.7, 480.0], [25.8, 480.0], [25.9, 481.0], [26.0, 481.0], [26.1, 481.0], [26.2, 482.0], [26.3, 482.0], [26.4, 483.0], [26.5, 483.0], [26.6, 483.0], [26.7, 484.0], [26.8, 484.0], [26.9, 484.0], [27.0, 485.0], [27.1, 485.0], [27.2, 486.0], [27.3, 486.0], [27.4, 486.0], [27.5, 486.0], [27.6, 487.0], [27.7, 487.0], [27.8, 487.0], [27.9, 488.0], [28.0, 488.0], [28.1, 489.0], [28.2, 489.0], [28.3, 490.0], [28.4, 490.0], [28.5, 490.0], [28.6, 491.0], [28.7, 491.0], [28.8, 491.0], [28.9, 492.0], [29.0, 492.0], [29.1, 493.0], [29.2, 493.0], [29.3, 494.0], [29.4, 494.0], [29.5, 495.0], [29.6, 496.0], [29.7, 496.0], [29.8, 496.0], [29.9, 497.0], [30.0, 497.0], [30.1, 498.0], [30.2, 499.0], [30.3, 499.0], [30.4, 500.0], [30.5, 500.0], [30.6, 501.0], [30.7, 501.0], [30.8, 502.0], [30.9, 503.0], [31.0, 503.0], [31.1, 504.0], [31.2, 504.0], [31.3, 505.0], [31.4, 506.0], [31.5, 507.0], [31.6, 507.0], [31.7, 508.0], [31.8, 509.0], [31.9, 509.0], [32.0, 510.0], [32.1, 511.0], [32.2, 511.0], [32.3, 512.0], [32.4, 512.0], [32.5, 513.0], [32.6, 514.0], [32.7, 514.0], [32.8, 515.0], [32.9, 516.0], [33.0, 517.0], [33.1, 518.0], [33.2, 518.0], [33.3, 519.0], [33.4, 520.0], [33.5, 521.0], [33.6, 521.0], [33.7, 522.0], [33.8, 523.0], [33.9, 524.0], [34.0, 525.0], [34.1, 526.0], [34.2, 527.0], [34.3, 528.0], [34.4, 528.0], [34.5, 529.0], [34.6, 531.0], [34.7, 531.0], [34.8, 532.0], [34.9, 533.0], [35.0, 535.0], [35.1, 536.0], [35.2, 536.0], [35.3, 537.0], [35.4, 538.0], [35.5, 539.0], [35.6, 541.0], [35.7, 541.0], [35.8, 543.0], [35.9, 544.0], [36.0, 545.0], [36.1, 546.0], [36.2, 547.0], [36.3, 548.0], [36.4, 549.0], [36.5, 551.0], [36.6, 552.0], [36.7, 553.0], [36.8, 555.0], [36.9, 555.0], [37.0, 557.0], [37.1, 558.0], [37.2, 559.0], [37.3, 560.0], [37.4, 562.0], [37.5, 563.0], [37.6, 565.0], [37.7, 566.0], [37.8, 568.0], [37.9, 569.0], [38.0, 570.0], [38.1, 571.0], [38.2, 573.0], [38.3, 574.0], [38.4, 575.0], [38.5, 576.0], [38.6, 578.0], [38.7, 580.0], [38.8, 581.0], [38.9, 583.0], [39.0, 585.0], [39.1, 587.0], [39.2, 588.0], [39.3, 590.0], [39.4, 591.0], [39.5, 593.0], [39.6, 594.0], [39.7, 597.0], [39.8, 598.0], [39.9, 601.0], [40.0, 602.0], [40.1, 603.0], [40.2, 606.0], [40.3, 607.0], [40.4, 610.0], [40.5, 612.0], [40.6, 614.0], [40.7, 616.0], [40.8, 618.0], [40.9, 621.0], [41.0, 623.0], [41.1, 625.0], [41.2, 626.0], [41.3, 627.0], [41.4, 629.0], [41.5, 630.0], [41.6, 633.0], [41.7, 635.0], [41.8, 638.0], [41.9, 640.0], [42.0, 643.0], [42.1, 645.0], [42.2, 647.0], [42.3, 649.0], [42.4, 651.0], [42.5, 653.0], [42.6, 654.0], [42.7, 655.0], [42.8, 658.0], [42.9, 660.0], [43.0, 663.0], [43.1, 665.0], [43.2, 667.0], [43.3, 670.0], [43.4, 671.0], [43.5, 673.0], [43.6, 674.0], [43.7, 675.0], [43.8, 677.0], [43.9, 677.0], [44.0, 679.0], [44.1, 680.0], [44.2, 683.0], [44.3, 684.0], [44.4, 685.0], [44.5, 687.0], [44.6, 687.0], [44.7, 688.0], [44.8, 689.0], [44.9, 689.0], [45.0, 690.0], [45.1, 691.0], [45.2, 692.0], [45.3, 693.0], [45.4, 694.0], [45.5, 695.0], [45.6, 695.0], [45.7, 696.0], [45.8, 696.0], [45.9, 697.0], [46.0, 698.0], [46.1, 698.0], [46.2, 699.0], [46.3, 699.0], [46.4, 700.0], [46.5, 701.0], [46.6, 701.0], [46.7, 702.0], [46.8, 702.0], [46.9, 703.0], [47.0, 704.0], [47.1, 704.0], [47.2, 705.0], [47.3, 705.0], [47.4, 706.0], [47.5, 707.0], [47.6, 708.0], [47.7, 708.0], [47.8, 709.0], [47.9, 710.0], [48.0, 710.0], [48.1, 711.0], [48.2, 711.0], [48.3, 712.0], [48.4, 712.0], [48.5, 713.0], [48.6, 714.0], [48.7, 715.0], [48.8, 716.0], [48.9, 716.0], [49.0, 717.0], [49.1, 718.0], [49.2, 718.0], [49.3, 719.0], [49.4, 720.0], [49.5, 721.0], [49.6, 722.0], [49.7, 722.0], [49.8, 723.0], [49.9, 723.0], [50.0, 725.0], [50.1, 726.0], [50.2, 727.0], [50.3, 727.0], [50.4, 728.0], [50.5, 729.0], [50.6, 730.0], [50.7, 730.0], [50.8, 731.0], [50.9, 732.0], [51.0, 734.0], [51.1, 734.0], [51.2, 735.0], [51.3, 736.0], [51.4, 737.0], [51.5, 738.0], [51.6, 739.0], [51.7, 740.0], [51.8, 741.0], [51.9, 742.0], [52.0, 743.0], [52.1, 744.0], [52.2, 746.0], [52.3, 747.0], [52.4, 748.0], [52.5, 749.0], [52.6, 750.0], [52.7, 751.0], [52.8, 752.0], [52.9, 753.0], [53.0, 754.0], [53.1, 754.0], [53.2, 756.0], [53.3, 757.0], [53.4, 759.0], [53.5, 761.0], [53.6, 762.0], [53.7, 764.0], [53.8, 765.0], [53.9, 766.0], [54.0, 768.0], [54.1, 769.0], [54.2, 770.0], [54.3, 771.0], [54.4, 772.0], [54.5, 773.0], [54.6, 775.0], [54.7, 777.0], [54.8, 778.0], [54.9, 779.0], [55.0, 780.0], [55.1, 782.0], [55.2, 783.0], [55.3, 785.0], [55.4, 787.0], [55.5, 788.0], [55.6, 790.0], [55.7, 791.0], [55.8, 793.0], [55.9, 794.0], [56.0, 795.0], [56.1, 797.0], [56.2, 799.0], [56.3, 800.0], [56.4, 801.0], [56.5, 803.0], [56.6, 805.0], [56.7, 806.0], [56.8, 808.0], [56.9, 809.0], [57.0, 811.0], [57.1, 812.0], [57.2, 814.0], [57.3, 815.0], [57.4, 817.0], [57.5, 819.0], [57.6, 821.0], [57.7, 822.0], [57.8, 824.0], [57.9, 826.0], [58.0, 827.0], [58.1, 828.0], [58.2, 830.0], [58.3, 831.0], [58.4, 833.0], [58.5, 836.0], [58.6, 838.0], [58.7, 840.0], [58.8, 842.0], [58.9, 843.0], [59.0, 845.0], [59.1, 846.0], [59.2, 848.0], [59.3, 851.0], [59.4, 853.0], [59.5, 855.0], [59.6, 856.0], [59.7, 858.0], [59.8, 862.0], [59.9, 863.0], [60.0, 865.0], [60.1, 867.0], [60.2, 869.0], [60.3, 872.0], [60.4, 873.0], [60.5, 874.0], [60.6, 876.0], [60.7, 878.0], [60.8, 880.0], [60.9, 881.0], [61.0, 883.0], [61.1, 884.0], [61.2, 887.0], [61.3, 889.0], [61.4, 890.0], [61.5, 892.0], [61.6, 895.0], [61.7, 896.0], [61.8, 898.0], [61.9, 900.0], [62.0, 902.0], [62.1, 903.0], [62.2, 906.0], [62.3, 909.0], [62.4, 911.0], [62.5, 912.0], [62.6, 913.0], [62.7, 916.0], [62.8, 918.0], [62.9, 920.0], [63.0, 923.0], [63.1, 924.0], [63.2, 926.0], [63.3, 928.0], [63.4, 930.0], [63.5, 932.0], [63.6, 934.0], [63.7, 935.0], [63.8, 938.0], [63.9, 940.0], [64.0, 942.0], [64.1, 945.0], [64.2, 948.0], [64.3, 951.0], [64.4, 954.0], [64.5, 955.0], [64.6, 957.0], [64.7, 959.0], [64.8, 962.0], [64.9, 964.0], [65.0, 966.0], [65.1, 969.0], [65.2, 971.0], [65.3, 974.0], [65.4, 976.0], [65.5, 978.0], [65.6, 980.0], [65.7, 983.0], [65.8, 985.0], [65.9, 988.0], [66.0, 991.0], [66.1, 993.0], [66.2, 994.0], [66.3, 996.0], [66.4, 998.0], [66.5, 999.0], [66.6, 1000.0], [66.7, 1002.0], [66.8, 1003.0], [66.9, 1006.0], [67.0, 1007.0], [67.1, 1009.0], [67.2, 1010.0], [67.3, 1012.0], [67.4, 1013.0], [67.5, 1015.0], [67.6, 1016.0], [67.7, 1018.0], [67.8, 1019.0], [67.9, 1020.0], [68.0, 1022.0], [68.1, 1023.0], [68.2, 1025.0], [68.3, 1026.0], [68.4, 1028.0], [68.5, 1030.0], [68.6, 1032.0], [68.7, 1034.0], [68.8, 1035.0], [68.9, 1037.0], [69.0, 1039.0], [69.1, 1041.0], [69.2, 1045.0], [69.3, 1046.0], [69.4, 1048.0], [69.5, 1050.0], [69.6, 1052.0], [69.7, 1054.0], [69.8, 1057.0], [69.9, 1059.0], [70.0, 1061.0], [70.1, 1064.0], [70.2, 1066.0], [70.3, 1069.0], [70.4, 1072.0], [70.5, 1074.0], [70.6, 1075.0], [70.7, 1078.0], [70.8, 1080.0], [70.9, 1082.0], [71.0, 1084.0], [71.1, 1086.0], [71.2, 1089.0], [71.3, 1091.0], [71.4, 1094.0], [71.5, 1095.0], [71.6, 1098.0], [71.7, 1100.0], [71.8, 1104.0], [71.9, 1105.0], [72.0, 1109.0], [72.1, 1111.0], [72.2, 1114.0], [72.3, 1116.0], [72.4, 1118.0], [72.5, 1122.0], [72.6, 1123.0], [72.7, 1126.0], [72.8, 1129.0], [72.9, 1132.0], [73.0, 1136.0], [73.1, 1138.0], [73.2, 1140.0], [73.3, 1143.0], [73.4, 1149.0], [73.5, 1151.0], [73.6, 1154.0], [73.7, 1158.0], [73.8, 1162.0], [73.9, 1164.0], [74.0, 1167.0], [74.1, 1169.0], [74.2, 1174.0], [74.3, 1176.0], [74.4, 1180.0], [74.5, 1184.0], [74.6, 1187.0], [74.7, 1188.0], [74.8, 1193.0], [74.9, 1198.0], [75.0, 1202.0], [75.1, 1205.0], [75.2, 1209.0], [75.3, 1213.0], [75.4, 1216.0], [75.5, 1219.0], [75.6, 1223.0], [75.7, 1224.0], [75.8, 1227.0], [75.9, 1232.0], [76.0, 1235.0], [76.1, 1238.0], [76.2, 1241.0], [76.3, 1245.0], [76.4, 1248.0], [76.5, 1251.0], [76.6, 1255.0], [76.7, 1260.0], [76.8, 1264.0], [76.9, 1268.0], [77.0, 1271.0], [77.1, 1274.0], [77.2, 1278.0], [77.3, 1282.0], [77.4, 1287.0], [77.5, 1290.0], [77.6, 1293.0], [77.7, 1296.0], [77.8, 1301.0], [77.9, 1307.0], [78.0, 1310.0], [78.1, 1315.0], [78.2, 1321.0], [78.3, 1325.0], [78.4, 1331.0], [78.5, 1337.0], [78.6, 1342.0], [78.7, 1346.0], [78.8, 1350.0], [78.9, 1353.0], [79.0, 1357.0], [79.1, 1361.0], [79.2, 1365.0], [79.3, 1370.0], [79.4, 1376.0], [79.5, 1380.0], [79.6, 1385.0], [79.7, 1390.0], [79.8, 1394.0], [79.9, 1398.0], [80.0, 1402.0], [80.1, 1408.0], [80.2, 1412.0], [80.3, 1416.0], [80.4, 1419.0], [80.5, 1424.0], [80.6, 1429.0], [80.7, 1434.0], [80.8, 1439.0], [80.9, 1443.0], [81.0, 1448.0], [81.1, 1452.0], [81.2, 1456.0], [81.3, 1462.0], [81.4, 1469.0], [81.5, 1476.0], [81.6, 1481.0], [81.7, 1485.0], [81.8, 1492.0], [81.9, 1497.0], [82.0, 1502.0], [82.1, 1507.0], [82.2, 1511.0], [82.3, 1516.0], [82.4, 1522.0], [82.5, 1528.0], [82.6, 1534.0], [82.7, 1540.0], [82.8, 1546.0], [82.9, 1553.0], [83.0, 1557.0], [83.1, 1563.0], [83.2, 1569.0], [83.3, 1577.0], [83.4, 1585.0], [83.5, 1588.0], [83.6, 1594.0], [83.7, 1599.0], [83.8, 1605.0], [83.9, 1612.0], [84.0, 1616.0], [84.1, 1622.0], [84.2, 1630.0], [84.3, 1636.0], [84.4, 1644.0], [84.5, 1648.0], [84.6, 1653.0], [84.7, 1660.0], [84.8, 1666.0], [84.9, 1672.0], [85.0, 1676.0], [85.1, 1681.0], [85.2, 1689.0], [85.3, 1695.0], [85.4, 1702.0], [85.5, 1715.0], [85.6, 1723.0], [85.7, 1727.0], [85.8, 1732.0], [85.9, 1737.0], [86.0, 1745.0], [86.1, 1751.0], [86.2, 1761.0], [86.3, 1773.0], [86.4, 1782.0], [86.5, 1788.0], [86.6, 1795.0], [86.7, 1805.0], [86.8, 1814.0], [86.9, 1829.0], [87.0, 1840.0], [87.1, 1849.0], [87.2, 1855.0], [87.3, 1863.0], [87.4, 1872.0], [87.5, 1883.0], [87.6, 1897.0], [87.7, 1910.0], [87.8, 1921.0], [87.9, 1932.0], [88.0, 1937.0], [88.1, 1950.0], [88.2, 1963.0], [88.3, 1971.0], [88.4, 1980.0], [88.5, 1995.0], [88.6, 2005.0], [88.7, 2020.0], [88.8, 2034.0], [88.9, 2043.0], [89.0, 2055.0], [89.1, 2069.0], [89.2, 2078.0], [89.3, 2092.0], [89.4, 2099.0], [89.5, 2109.0], [89.6, 2120.0], [89.7, 2132.0], [89.8, 2144.0], [89.9, 2153.0], [90.0, 2163.0], [90.1, 2172.0], [90.2, 2185.0], [90.3, 2202.0], [90.4, 2213.0], [90.5, 2224.0], [90.6, 2241.0], [90.7, 2252.0], [90.8, 2280.0], [90.9, 2297.0], [91.0, 2309.0], [91.1, 2327.0], [91.2, 2345.0], [91.3, 2364.0], [91.4, 2385.0], [91.5, 2401.0], [91.6, 2416.0], [91.7, 2433.0], [91.8, 2452.0], [91.9, 2474.0], [92.0, 2500.0], [92.1, 2524.0], [92.2, 2550.0], [92.3, 2569.0], [92.4, 2585.0], [92.5, 2601.0], [92.6, 2629.0], [92.7, 2641.0], [92.8, 2666.0], [92.9, 2690.0], [93.0, 2700.0], [93.1, 2721.0], [93.2, 2736.0], [93.3, 2765.0], [93.4, 2783.0], [93.5, 2800.0], [93.6, 2821.0], [93.7, 2846.0], [93.8, 2871.0], [93.9, 2892.0], [94.0, 2928.0], [94.1, 2950.0], [94.2, 2974.0], [94.3, 3000.0], [94.4, 3029.0], [94.5, 3061.0], [94.6, 3092.0], [94.7, 3124.0], [94.8, 3165.0], [94.9, 3197.0], [95.0, 3221.0], [95.1, 3247.0], [95.2, 3281.0], [95.3, 3321.0], [95.4, 3347.0], [95.5, 3377.0], [95.6, 3424.0], [95.7, 3465.0], [95.8, 3488.0], [95.9, 3519.0], [96.0, 3546.0], [96.1, 3576.0], [96.2, 3601.0], [96.3, 3642.0], [96.4, 3679.0], [96.5, 3700.0], [96.6, 3745.0], [96.7, 3779.0], [96.8, 3806.0], [96.9, 3839.0], [97.0, 3882.0], [97.1, 3926.0], [97.2, 3968.0], [97.3, 3988.0], [97.4, 4013.0], [97.5, 4053.0], [97.6, 4100.0], [97.7, 4153.0], [97.8, 4233.0], [97.9, 4328.0], [98.0, 4426.0], [98.1, 4516.0], [98.2, 4658.0], [98.3, 4717.0], [98.4, 4820.0], [98.5, 4900.0], [98.6, 4975.0], [98.7, 5059.0], [98.8, 5218.0], [98.9, 5455.0], [99.0, 5759.0], [99.1, 5905.0], [99.2, 6097.0], [99.3, 6608.0], [99.4, 6994.0], [99.5, 7703.0], [99.6, 8228.0], [99.7, 8883.0], [99.8, 10293.0], [99.9, 12059.0], [100.0, 21760.0]], "isOverall": false, "label": "Search for Test", "isController": false}, {"data": [[0.0, 2170.0], [0.1, 2170.0], [0.2, 2170.0], [0.3, 2170.0], [0.4, 2170.0], [0.5, 2170.0], [0.6, 2170.0], [0.7, 2170.0], [0.8, 2170.0], [0.9, 2170.0], [1.0, 2170.0], [1.1, 2170.0], [1.2, 2170.0], [1.3, 2170.0], [1.4, 2170.0], [1.5, 2170.0], [1.6, 2170.0], [1.7, 2170.0], [1.8, 2170.0], [1.9, 2170.0], [2.0, 2170.0], [2.1, 2170.0], [2.2, 2170.0], [2.3, 2170.0], [2.4, 2170.0], [2.5, 2170.0], [2.6, 2170.0], [2.7, 2170.0], [2.8, 2170.0], [2.9, 2170.0], [3.0, 2170.0], [3.1, 2170.0], [3.2, 2170.0], [3.3, 2170.0], [3.4, 2170.0], [3.5, 2170.0], [3.6, 2170.0], [3.7, 2170.0], [3.8, 2170.0], [3.9, 2170.0], [4.0, 2170.0], [4.1, 2170.0], [4.2, 2170.0], [4.3, 2170.0], [4.4, 2170.0], [4.5, 2170.0], [4.6, 2170.0], [4.7, 2170.0], [4.8, 2170.0], [4.9, 2170.0], [5.0, 2170.0], [5.1, 2170.0], [5.2, 2170.0], [5.3, 2170.0], [5.4, 2170.0], [5.5, 2170.0], [5.6, 2170.0], [5.7, 2170.0], [5.8, 2170.0], [5.9, 2170.0], [6.0, 2170.0], [6.1, 2170.0], [6.2, 2170.0], [6.3, 2170.0], [6.4, 2170.0], [6.5, 2170.0], [6.6, 2170.0], [6.7, 2170.0], [6.8, 2170.0], [6.9, 2170.0], [7.0, 2170.0], [7.1, 2170.0], [7.2, 2170.0], [7.3, 2170.0], [7.4, 2170.0], [7.5, 2170.0], [7.6, 2170.0], [7.7, 2170.0], [7.8, 2170.0], [7.9, 2170.0], [8.0, 2170.0], [8.1, 2170.0], [8.2, 2170.0], [8.3, 2170.0], [8.4, 2170.0], [8.5, 2170.0], [8.6, 2170.0], [8.7, 2170.0], [8.8, 2170.0], [8.9, 2170.0], [9.0, 2170.0], [9.1, 2170.0], [9.2, 2170.0], [9.3, 2170.0], [9.4, 2170.0], [9.5, 2170.0], [9.6, 2170.0], [9.7, 2170.0], [9.8, 2170.0], [9.9, 2170.0], [10.0, 2170.0], [10.1, 2170.0], [10.2, 2170.0], [10.3, 2170.0], [10.4, 2170.0], [10.5, 2170.0], [10.6, 2170.0], [10.7, 2170.0], [10.8, 2170.0], [10.9, 2170.0], [11.0, 2170.0], [11.1, 2170.0], [11.2, 2170.0], [11.3, 2170.0], [11.4, 2170.0], [11.5, 2170.0], [11.6, 2170.0], [11.7, 2170.0], [11.8, 2170.0], [11.9, 2170.0], [12.0, 2170.0], [12.1, 2170.0], [12.2, 2170.0], [12.3, 2170.0], [12.4, 2170.0], [12.5, 2170.0], [12.6, 2170.0], [12.7, 2170.0], [12.8, 2170.0], [12.9, 2170.0], [13.0, 2170.0], [13.1, 2170.0], [13.2, 2170.0], [13.3, 2170.0], [13.4, 2170.0], [13.5, 2170.0], [13.6, 2170.0], [13.7, 2170.0], [13.8, 2170.0], [13.9, 2170.0], [14.0, 2170.0], [14.1, 2170.0], [14.2, 2170.0], [14.3, 2170.0], [14.4, 2170.0], [14.5, 2170.0], [14.6, 2170.0], [14.7, 2170.0], [14.8, 2170.0], [14.9, 2170.0], [15.0, 2170.0], [15.1, 2170.0], [15.2, 2170.0], [15.3, 2170.0], [15.4, 2170.0], [15.5, 2170.0], [15.6, 2170.0], [15.7, 2170.0], [15.8, 2170.0], [15.9, 2170.0], [16.0, 2170.0], [16.1, 2170.0], [16.2, 2170.0], [16.3, 2170.0], [16.4, 2170.0], [16.5, 2170.0], [16.6, 2170.0], [16.7, 2170.0], [16.8, 2170.0], [16.9, 2170.0], [17.0, 2170.0], [17.1, 2170.0], [17.2, 2170.0], [17.3, 2170.0], [17.4, 2170.0], [17.5, 2170.0], [17.6, 2170.0], [17.7, 2170.0], [17.8, 2170.0], [17.9, 2170.0], [18.0, 2170.0], [18.1, 2170.0], [18.2, 2170.0], [18.3, 2170.0], [18.4, 2170.0], [18.5, 2170.0], [18.6, 2170.0], [18.7, 2170.0], [18.8, 2170.0], [18.9, 2170.0], [19.0, 2170.0], [19.1, 2170.0], [19.2, 2170.0], [19.3, 2170.0], [19.4, 2170.0], [19.5, 2170.0], [19.6, 2170.0], [19.7, 2170.0], [19.8, 2170.0], [19.9, 2170.0], [20.0, 2170.0], [20.1, 2170.0], [20.2, 2170.0], [20.3, 2170.0], [20.4, 2170.0], [20.5, 2170.0], [20.6, 2170.0], [20.7, 2170.0], [20.8, 2170.0], [20.9, 2170.0], [21.0, 2170.0], [21.1, 2170.0], [21.2, 2170.0], [21.3, 2170.0], [21.4, 2170.0], [21.5, 2170.0], [21.6, 2170.0], [21.7, 2170.0], [21.8, 2170.0], [21.9, 2170.0], [22.0, 2170.0], [22.1, 2170.0], [22.2, 2170.0], [22.3, 2170.0], [22.4, 2170.0], [22.5, 2170.0], [22.6, 2170.0], [22.7, 2170.0], [22.8, 2170.0], [22.9, 2170.0], [23.0, 2170.0], [23.1, 2170.0], [23.2, 2170.0], [23.3, 2170.0], [23.4, 2170.0], [23.5, 2170.0], [23.6, 2170.0], [23.7, 2170.0], [23.8, 2170.0], [23.9, 2170.0], [24.0, 2170.0], [24.1, 2170.0], [24.2, 2170.0], [24.3, 2170.0], [24.4, 2170.0], [24.5, 2170.0], [24.6, 2170.0], [24.7, 2170.0], [24.8, 2170.0], [24.9, 2170.0], [25.0, 2170.0], [25.1, 2170.0], [25.2, 2170.0], [25.3, 2170.0], [25.4, 2170.0], [25.5, 2170.0], [25.6, 2170.0], [25.7, 2170.0], [25.8, 2170.0], [25.9, 2170.0], [26.0, 2170.0], [26.1, 2170.0], [26.2, 2170.0], [26.3, 2170.0], [26.4, 2170.0], [26.5, 2170.0], [26.6, 2170.0], [26.7, 2170.0], [26.8, 2170.0], [26.9, 2170.0], [27.0, 2170.0], [27.1, 2170.0], [27.2, 2170.0], [27.3, 2170.0], [27.4, 2170.0], [27.5, 2170.0], [27.6, 2170.0], [27.7, 2170.0], [27.8, 2170.0], [27.9, 2170.0], [28.0, 2170.0], [28.1, 2170.0], [28.2, 2170.0], [28.3, 2170.0], [28.4, 2170.0], [28.5, 2170.0], [28.6, 2170.0], [28.7, 2170.0], [28.8, 2170.0], [28.9, 2170.0], [29.0, 2170.0], [29.1, 2170.0], [29.2, 2170.0], [29.3, 2170.0], [29.4, 2170.0], [29.5, 2170.0], [29.6, 2170.0], [29.7, 2170.0], [29.8, 2170.0], [29.9, 2170.0], [30.0, 2170.0], [30.1, 2170.0], [30.2, 2170.0], [30.3, 2170.0], [30.4, 2170.0], [30.5, 2170.0], [30.6, 2170.0], [30.7, 2170.0], [30.8, 2170.0], [30.9, 2170.0], [31.0, 2170.0], [31.1, 2170.0], [31.2, 2170.0], [31.3, 2170.0], [31.4, 2170.0], [31.5, 2170.0], [31.6, 2170.0], [31.7, 2170.0], [31.8, 2170.0], [31.9, 2170.0], [32.0, 2170.0], [32.1, 2170.0], [32.2, 2170.0], [32.3, 2170.0], [32.4, 2170.0], [32.5, 2170.0], [32.6, 2170.0], [32.7, 2170.0], [32.8, 2170.0], [32.9, 2170.0], [33.0, 2170.0], [33.1, 2170.0], [33.2, 2170.0], [33.3, 2170.0], [33.4, 2170.0], [33.5, 2170.0], [33.6, 2170.0], [33.7, 2170.0], [33.8, 2170.0], [33.9, 2170.0], [34.0, 2170.0], [34.1, 2170.0], [34.2, 2170.0], [34.3, 2170.0], [34.4, 2170.0], [34.5, 2170.0], [34.6, 2170.0], [34.7, 2170.0], [34.8, 2170.0], [34.9, 2170.0], [35.0, 2170.0], [35.1, 2170.0], [35.2, 2170.0], [35.3, 2170.0], [35.4, 2170.0], [35.5, 2170.0], [35.6, 2170.0], [35.7, 2170.0], [35.8, 2170.0], [35.9, 2170.0], [36.0, 2170.0], [36.1, 2170.0], [36.2, 2170.0], [36.3, 2170.0], [36.4, 2170.0], [36.5, 2170.0], [36.6, 2170.0], [36.7, 2170.0], [36.8, 2170.0], [36.9, 2170.0], [37.0, 2170.0], [37.1, 2170.0], [37.2, 2170.0], [37.3, 2170.0], [37.4, 2170.0], [37.5, 2170.0], [37.6, 2170.0], [37.7, 2170.0], [37.8, 2170.0], [37.9, 2170.0], [38.0, 2170.0], [38.1, 2170.0], [38.2, 2170.0], [38.3, 2170.0], [38.4, 2170.0], [38.5, 2170.0], [38.6, 2170.0], [38.7, 2170.0], [38.8, 2170.0], [38.9, 2170.0], [39.0, 2170.0], [39.1, 2170.0], [39.2, 2170.0], [39.3, 2170.0], [39.4, 2170.0], [39.5, 2170.0], [39.6, 2170.0], [39.7, 2170.0], [39.8, 2170.0], [39.9, 2170.0], [40.0, 2170.0], [40.1, 2170.0], [40.2, 2170.0], [40.3, 2170.0], [40.4, 2170.0], [40.5, 2170.0], [40.6, 2170.0], [40.7, 2170.0], [40.8, 2170.0], [40.9, 2170.0], [41.0, 2170.0], [41.1, 2170.0], [41.2, 2170.0], [41.3, 2170.0], [41.4, 2170.0], [41.5, 2170.0], [41.6, 2170.0], [41.7, 2170.0], [41.8, 2170.0], [41.9, 2170.0], [42.0, 2170.0], [42.1, 2170.0], [42.2, 2170.0], [42.3, 2170.0], [42.4, 2170.0], [42.5, 2170.0], [42.6, 2170.0], [42.7, 2170.0], [42.8, 2170.0], [42.9, 2170.0], [43.0, 2170.0], [43.1, 2170.0], [43.2, 2170.0], [43.3, 2170.0], [43.4, 2170.0], [43.5, 2170.0], [43.6, 2170.0], [43.7, 2170.0], [43.8, 2170.0], [43.9, 2170.0], [44.0, 2170.0], [44.1, 2170.0], [44.2, 2170.0], [44.3, 2170.0], [44.4, 2170.0], [44.5, 2170.0], [44.6, 2170.0], [44.7, 2170.0], [44.8, 2170.0], [44.9, 2170.0], [45.0, 2170.0], [45.1, 2170.0], [45.2, 2170.0], [45.3, 2170.0], [45.4, 2170.0], [45.5, 2170.0], [45.6, 2170.0], [45.7, 2170.0], [45.8, 2170.0], [45.9, 2170.0], [46.0, 2170.0], [46.1, 2170.0], [46.2, 2170.0], [46.3, 2170.0], [46.4, 2170.0], [46.5, 2170.0], [46.6, 2170.0], [46.7, 2170.0], [46.8, 2170.0], [46.9, 2170.0], [47.0, 2170.0], [47.1, 2170.0], [47.2, 2170.0], [47.3, 2170.0], [47.4, 2170.0], [47.5, 2170.0], [47.6, 2170.0], [47.7, 2170.0], [47.8, 2170.0], [47.9, 2170.0], [48.0, 2170.0], [48.1, 2170.0], [48.2, 2170.0], [48.3, 2170.0], [48.4, 2170.0], [48.5, 2170.0], [48.6, 2170.0], [48.7, 2170.0], [48.8, 2170.0], [48.9, 2170.0], [49.0, 2170.0], [49.1, 2170.0], [49.2, 2170.0], [49.3, 2170.0], [49.4, 2170.0], [49.5, 2170.0], [49.6, 2170.0], [49.7, 2170.0], [49.8, 2170.0], [49.9, 2170.0], [50.0, 2170.0], [50.1, 2170.0], [50.2, 2170.0], [50.3, 2170.0], [50.4, 2170.0], [50.5, 2170.0], [50.6, 2170.0], [50.7, 2170.0], [50.8, 2170.0], [50.9, 2170.0], [51.0, 2170.0], [51.1, 2170.0], [51.2, 2170.0], [51.3, 2170.0], [51.4, 2170.0], [51.5, 2170.0], [51.6, 2170.0], [51.7, 2170.0], [51.8, 2170.0], [51.9, 2170.0], [52.0, 2170.0], [52.1, 2170.0], [52.2, 2170.0], [52.3, 2170.0], [52.4, 2170.0], [52.5, 2170.0], [52.6, 2170.0], [52.7, 2170.0], [52.8, 2170.0], [52.9, 2170.0], [53.0, 2170.0], [53.1, 2170.0], [53.2, 2170.0], [53.3, 2170.0], [53.4, 2170.0], [53.5, 2170.0], [53.6, 2170.0], [53.7, 2170.0], [53.8, 2170.0], [53.9, 2170.0], [54.0, 2170.0], [54.1, 2170.0], [54.2, 2170.0], [54.3, 2170.0], [54.4, 2170.0], [54.5, 2170.0], [54.6, 2170.0], [54.7, 2170.0], [54.8, 2170.0], [54.9, 2170.0], [55.0, 2170.0], [55.1, 2170.0], [55.2, 2170.0], [55.3, 2170.0], [55.4, 2170.0], [55.5, 2170.0], [55.6, 2170.0], [55.7, 2170.0], [55.8, 2170.0], [55.9, 2170.0], [56.0, 2170.0], [56.1, 2170.0], [56.2, 2170.0], [56.3, 2170.0], [56.4, 2170.0], [56.5, 2170.0], [56.6, 2170.0], [56.7, 2170.0], [56.8, 2170.0], [56.9, 2170.0], [57.0, 2170.0], [57.1, 2170.0], [57.2, 2170.0], [57.3, 2170.0], [57.4, 2170.0], [57.5, 2170.0], [57.6, 2170.0], [57.7, 2170.0], [57.8, 2170.0], [57.9, 2170.0], [58.0, 2170.0], [58.1, 2170.0], [58.2, 2170.0], [58.3, 2170.0], [58.4, 2170.0], [58.5, 2170.0], [58.6, 2170.0], [58.7, 2170.0], [58.8, 2170.0], [58.9, 2170.0], [59.0, 2170.0], [59.1, 2170.0], [59.2, 2170.0], [59.3, 2170.0], [59.4, 2170.0], [59.5, 2170.0], [59.6, 2170.0], [59.7, 2170.0], [59.8, 2170.0], [59.9, 2170.0], [60.0, 2170.0], [60.1, 2170.0], [60.2, 2170.0], [60.3, 2170.0], [60.4, 2170.0], [60.5, 2170.0], [60.6, 2170.0], [60.7, 2170.0], [60.8, 2170.0], [60.9, 2170.0], [61.0, 2170.0], [61.1, 2170.0], [61.2, 2170.0], [61.3, 2170.0], [61.4, 2170.0], [61.5, 2170.0], [61.6, 2170.0], [61.7, 2170.0], [61.8, 2170.0], [61.9, 2170.0], [62.0, 2170.0], [62.1, 2170.0], [62.2, 2170.0], [62.3, 2170.0], [62.4, 2170.0], [62.5, 2170.0], [62.6, 2170.0], [62.7, 2170.0], [62.8, 2170.0], [62.9, 2170.0], [63.0, 2170.0], [63.1, 2170.0], [63.2, 2170.0], [63.3, 2170.0], [63.4, 2170.0], [63.5, 2170.0], [63.6, 2170.0], [63.7, 2170.0], [63.8, 2170.0], [63.9, 2170.0], [64.0, 2170.0], [64.1, 2170.0], [64.2, 2170.0], [64.3, 2170.0], [64.4, 2170.0], [64.5, 2170.0], [64.6, 2170.0], [64.7, 2170.0], [64.8, 2170.0], [64.9, 2170.0], [65.0, 2170.0], [65.1, 2170.0], [65.2, 2170.0], [65.3, 2170.0], [65.4, 2170.0], [65.5, 2170.0], [65.6, 2170.0], [65.7, 2170.0], [65.8, 2170.0], [65.9, 2170.0], [66.0, 2170.0], [66.1, 2170.0], [66.2, 2170.0], [66.3, 2170.0], [66.4, 2170.0], [66.5, 2170.0], [66.6, 2170.0], [66.7, 2170.0], [66.8, 2170.0], [66.9, 2170.0], [67.0, 2170.0], [67.1, 2170.0], [67.2, 2170.0], [67.3, 2170.0], [67.4, 2170.0], [67.5, 2170.0], [67.6, 2170.0], [67.7, 2170.0], [67.8, 2170.0], [67.9, 2170.0], [68.0, 2170.0], [68.1, 2170.0], [68.2, 2170.0], [68.3, 2170.0], [68.4, 2170.0], [68.5, 2170.0], [68.6, 2170.0], [68.7, 2170.0], [68.8, 2170.0], [68.9, 2170.0], [69.0, 2170.0], [69.1, 2170.0], [69.2, 2170.0], [69.3, 2170.0], [69.4, 2170.0], [69.5, 2170.0], [69.6, 2170.0], [69.7, 2170.0], [69.8, 2170.0], [69.9, 2170.0], [70.0, 2170.0], [70.1, 2170.0], [70.2, 2170.0], [70.3, 2170.0], [70.4, 2170.0], [70.5, 2170.0], [70.6, 2170.0], [70.7, 2170.0], [70.8, 2170.0], [70.9, 2170.0], [71.0, 2170.0], [71.1, 2170.0], [71.2, 2170.0], [71.3, 2170.0], [71.4, 2170.0], [71.5, 2170.0], [71.6, 2170.0], [71.7, 2170.0], [71.8, 2170.0], [71.9, 2170.0], [72.0, 2170.0], [72.1, 2170.0], [72.2, 2170.0], [72.3, 2170.0], [72.4, 2170.0], [72.5, 2170.0], [72.6, 2170.0], [72.7, 2170.0], [72.8, 2170.0], [72.9, 2170.0], [73.0, 2170.0], [73.1, 2170.0], [73.2, 2170.0], [73.3, 2170.0], [73.4, 2170.0], [73.5, 2170.0], [73.6, 2170.0], [73.7, 2170.0], [73.8, 2170.0], [73.9, 2170.0], [74.0, 2170.0], [74.1, 2170.0], [74.2, 2170.0], [74.3, 2170.0], [74.4, 2170.0], [74.5, 2170.0], [74.6, 2170.0], [74.7, 2170.0], [74.8, 2170.0], [74.9, 2170.0], [75.0, 2170.0], [75.1, 2170.0], [75.2, 2170.0], [75.3, 2170.0], [75.4, 2170.0], [75.5, 2170.0], [75.6, 2170.0], [75.7, 2170.0], [75.8, 2170.0], [75.9, 2170.0], [76.0, 2170.0], [76.1, 2170.0], [76.2, 2170.0], [76.3, 2170.0], [76.4, 2170.0], [76.5, 2170.0], [76.6, 2170.0], [76.7, 2170.0], [76.8, 2170.0], [76.9, 2170.0], [77.0, 2170.0], [77.1, 2170.0], [77.2, 2170.0], [77.3, 2170.0], [77.4, 2170.0], [77.5, 2170.0], [77.6, 2170.0], [77.7, 2170.0], [77.8, 2170.0], [77.9, 2170.0], [78.0, 2170.0], [78.1, 2170.0], [78.2, 2170.0], [78.3, 2170.0], [78.4, 2170.0], [78.5, 2170.0], [78.6, 2170.0], [78.7, 2170.0], [78.8, 2170.0], [78.9, 2170.0], [79.0, 2170.0], [79.1, 2170.0], [79.2, 2170.0], [79.3, 2170.0], [79.4, 2170.0], [79.5, 2170.0], [79.6, 2170.0], [79.7, 2170.0], [79.8, 2170.0], [79.9, 2170.0], [80.0, 2170.0], [80.1, 2170.0], [80.2, 2170.0], [80.3, 2170.0], [80.4, 2170.0], [80.5, 2170.0], [80.6, 2170.0], [80.7, 2170.0], [80.8, 2170.0], [80.9, 2170.0], [81.0, 2170.0], [81.1, 2170.0], [81.2, 2170.0], [81.3, 2170.0], [81.4, 2170.0], [81.5, 2170.0], [81.6, 2170.0], [81.7, 2170.0], [81.8, 2170.0], [81.9, 2170.0], [82.0, 2170.0], [82.1, 2170.0], [82.2, 2170.0], [82.3, 2170.0], [82.4, 2170.0], [82.5, 2170.0], [82.6, 2170.0], [82.7, 2170.0], [82.8, 2170.0], [82.9, 2170.0], [83.0, 2170.0], [83.1, 2170.0], [83.2, 2170.0], [83.3, 2170.0], [83.4, 2170.0], [83.5, 2170.0], [83.6, 2170.0], [83.7, 2170.0], [83.8, 2170.0], [83.9, 2170.0], [84.0, 2170.0], [84.1, 2170.0], [84.2, 2170.0], [84.3, 2170.0], [84.4, 2170.0], [84.5, 2170.0], [84.6, 2170.0], [84.7, 2170.0], [84.8, 2170.0], [84.9, 2170.0], [85.0, 2170.0], [85.1, 2170.0], [85.2, 2170.0], [85.3, 2170.0], [85.4, 2170.0], [85.5, 2170.0], [85.6, 2170.0], [85.7, 2170.0], [85.8, 2170.0], [85.9, 2170.0], [86.0, 2170.0], [86.1, 2170.0], [86.2, 2170.0], [86.3, 2170.0], [86.4, 2170.0], [86.5, 2170.0], [86.6, 2170.0], [86.7, 2170.0], [86.8, 2170.0], [86.9, 2170.0], [87.0, 2170.0], [87.1, 2170.0], [87.2, 2170.0], [87.3, 2170.0], [87.4, 2170.0], [87.5, 2170.0], [87.6, 2170.0], [87.7, 2170.0], [87.8, 2170.0], [87.9, 2170.0], [88.0, 2170.0], [88.1, 2170.0], [88.2, 2170.0], [88.3, 2170.0], [88.4, 2170.0], [88.5, 2170.0], [88.6, 2170.0], [88.7, 2170.0], [88.8, 2170.0], [88.9, 2170.0], [89.0, 2170.0], [89.1, 2170.0], [89.2, 2170.0], [89.3, 2170.0], [89.4, 2170.0], [89.5, 2170.0], [89.6, 2170.0], [89.7, 2170.0], [89.8, 2170.0], [89.9, 2170.0], [90.0, 2170.0], [90.1, 2170.0], [90.2, 2170.0], [90.3, 2170.0], [90.4, 2170.0], [90.5, 2170.0], [90.6, 2170.0], [90.7, 2170.0], [90.8, 2170.0], [90.9, 2170.0], [91.0, 2170.0], [91.1, 2170.0], [91.2, 2170.0], [91.3, 2170.0], [91.4, 2170.0], [91.5, 2170.0], [91.6, 2170.0], [91.7, 2170.0], [91.8, 2170.0], [91.9, 2170.0], [92.0, 2170.0], [92.1, 2170.0], [92.2, 2170.0], [92.3, 2170.0], [92.4, 2170.0], [92.5, 2170.0], [92.6, 2170.0], [92.7, 2170.0], [92.8, 2170.0], [92.9, 2170.0], [93.0, 2170.0], [93.1, 2170.0], [93.2, 2170.0], [93.3, 2170.0], [93.4, 2170.0], [93.5, 2170.0], [93.6, 2170.0], [93.7, 2170.0], [93.8, 2170.0], [93.9, 2170.0], [94.0, 2170.0], [94.1, 2170.0], [94.2, 2170.0], [94.3, 2170.0], [94.4, 2170.0], [94.5, 2170.0], [94.6, 2170.0], [94.7, 2170.0], [94.8, 2170.0], [94.9, 2170.0], [95.0, 2170.0], [95.1, 2170.0], [95.2, 2170.0], [95.3, 2170.0], [95.4, 2170.0], [95.5, 2170.0], [95.6, 2170.0], [95.7, 2170.0], [95.8, 2170.0], [95.9, 2170.0], [96.0, 2170.0], [96.1, 2170.0], [96.2, 2170.0], [96.3, 2170.0], [96.4, 2170.0], [96.5, 2170.0], [96.6, 2170.0], [96.7, 2170.0], [96.8, 2170.0], [96.9, 2170.0], [97.0, 2170.0], [97.1, 2170.0], [97.2, 2170.0], [97.3, 2170.0], [97.4, 2170.0], [97.5, 2170.0], [97.6, 2170.0], [97.7, 2170.0], [97.8, 2170.0], [97.9, 2170.0], [98.0, 2170.0], [98.1, 2170.0], [98.2, 2170.0], [98.3, 2170.0], [98.4, 2170.0], [98.5, 2170.0], [98.6, 2170.0], [98.7, 2170.0], [98.8, 2170.0], [98.9, 2170.0], [99.0, 2170.0], [99.1, 2170.0], [99.2, 2170.0], [99.3, 2170.0], [99.4, 2170.0], [99.5, 2170.0], [99.6, 2170.0], [99.7, 2170.0], [99.8, 2170.0], [99.9, 2170.0]], "isOverall": false, "label": "Get Access Token ", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 1825.0, "series": [{"data": [[200.0, 1598.0], [300.0, 1825.0], [400.0, 1664.0], [500.0, 1591.0], [600.0, 1080.0], [700.0, 1671.0], [800.0, 933.0], [900.0, 788.0], [1000.0, 856.0], [1100.0, 549.0], [1200.0, 477.0], [1300.0, 360.0], [1400.0, 334.0], [1500.0, 299.0], [1600.0, 281.0], [1700.0, 211.0], [1800.0, 164.0], [1900.0, 158.0], [2000.0, 140.0], [2100.0, 150.0], [2300.0, 93.0], [2200.0, 108.0], [2400.0, 84.0], [2500.0, 81.0], [2600.0, 83.0], [2700.0, 87.0], [2800.0, 69.0], [2900.0, 64.0], [3000.0, 57.0], [3100.0, 47.0], [3300.0, 45.0], [3200.0, 59.0], [3400.0, 49.0], [3500.0, 62.0], [3700.0, 45.0], [3600.0, 51.0], [3800.0, 44.0], [3900.0, 53.0], [4000.0, 42.0], [4300.0, 17.0], [4100.0, 23.0], [4200.0, 24.0], [4600.0, 20.0], [4400.0, 15.0], [4500.0, 15.0], [4800.0, 20.0], [4700.0, 17.0], [4900.0, 19.0], [5000.0, 24.0], [5100.0, 7.0], [5300.0, 4.0], [5200.0, 10.0], [5500.0, 6.0], [5600.0, 4.0], [5400.0, 6.0], [5800.0, 8.0], [5700.0, 12.0], [6000.0, 7.0], [5900.0, 11.0], [6100.0, 1.0], [6300.0, 5.0], [6400.0, 7.0], [6500.0, 3.0], [6600.0, 5.0], [6700.0, 6.0], [6900.0, 3.0], [6800.0, 4.0], [7100.0, 7.0], [7000.0, 1.0], [7400.0, 1.0], [7300.0, 3.0], [7500.0, 3.0], [7600.0, 1.0], [7700.0, 5.0], [7800.0, 1.0], [7900.0, 1.0], [8100.0, 4.0], [8000.0, 4.0], [8200.0, 3.0], [8400.0, 3.0], [8600.0, 3.0], [8500.0, 4.0], [8700.0, 1.0], [8300.0, 1.0], [8900.0, 1.0], [8800.0, 4.0], [9200.0, 1.0], [9000.0, 1.0], [9100.0, 1.0], [9600.0, 3.0], [9700.0, 2.0], [9400.0, 2.0], [9300.0, 1.0], [10000.0, 3.0], [10200.0, 2.0], [10500.0, 2.0], [10700.0, 1.0], [10600.0, 1.0], [10400.0, 1.0], [10800.0, 4.0], [11000.0, 1.0], [11100.0, 1.0], [11300.0, 3.0], [11400.0, 1.0], [12100.0, 1.0], [12000.0, 2.0], [12400.0, 2.0], [13200.0, 1.0], [13300.0, 1.0], [12800.0, 1.0], [13700.0, 1.0], [13900.0, 2.0], [14300.0, 1.0], [14700.0, 1.0], [14800.0, 1.0], [15100.0, 1.0], [16500.0, 1.0], [21300.0, 1.0], [21700.0, 1.0]], "isOverall": false, "label": "Search for Test", "isController": false}, {"data": [[2100.0, 1.0]], "isOverall": false, "label": "Get Access Token ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 21700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3023.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 8615.0, "series": [{"data": [[0.0, 5118.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 8615.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3023.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.59607794E12, "maxY": 20.0, "series": [{"data": [[1.59607794E12, 1.0]], "isOverall": false, "label": "setUp Thread Group", "isController": false}, {"data": [[1.59607884E12, 18.967391304347828], [1.59607854E12, 20.0], [1.59607848E12, 20.0], [1.59607818E12, 20.0], [1.59607812E12, 20.0], [1.59607878E12, 20.0], [1.59607872E12, 20.0], [1.59607842E12, 20.0], [1.59607836E12, 20.0], [1.59607806E12, 20.0], [1.596078E12, 20.0], [1.59607866E12, 20.0], [1.5960786E12, 20.0], [1.5960783E12, 20.0], [1.59607824E12, 20.0], [1.59607794E12, 20.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59607884E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 692.0, "minX": 1.0, "maxY": 3014.0, "series": [{"data": [[8.0, 1791.0], [2.0, 2281.0], [9.0, 1523.0], [10.0, 692.0], [11.0, 1664.0], [12.0, 1290.0], [3.0, 3014.0], [13.0, 1297.0], [14.0, 1293.0], [15.0, 1291.0], [16.0, 1294.0], [4.0, 1924.0], [1.0, 2335.0], [17.0, 1275.0], [18.0, 1271.0], [19.0, 1276.0], [20.0, 1073.753824091781], [5.0, 1860.0], [6.0, 919.0], [7.0, 997.0]], "isOverall": false, "label": "Search for Test", "isController": false}, {"data": [[19.988660101462255, 1074.2841539838882]], "isOverall": false, "label": "Search for Test-Aggregated", "isController": false}, {"data": [[1.0, 2170.0]], "isOverall": false, "label": "Get Access Token ", "isController": false}, {"data": [[1.0, 2170.0]], "isOverall": false, "label": "Get Access Token -Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 20.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3254.0666666666666, "minX": 1.59607794E12, "maxY": 905643.7, "series": [{"data": [[1.59607884E12, 117566.26666666666], [1.59607854E12, 864304.0333333333], [1.59607848E12, 580629.25], [1.59607818E12, 659464.4166666666], [1.59607812E12, 819968.4166666666], [1.59607878E12, 659831.0], [1.59607872E12, 713954.5833333334], [1.59607842E12, 432059.9166666667], [1.59607836E12, 398120.3], [1.59607806E12, 815911.35], [1.596078E12, 682900.5333333333], [1.59607866E12, 535680.75], [1.5960786E12, 664840.65], [1.5960783E12, 529092.85], [1.59607824E12, 905643.7], [1.59607794E12, 834675.8833333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.59607884E12, 3254.0666666666666], [1.59607854E12, 24969.966666666667], [1.59607848E12, 16729.2], [1.59607818E12, 19203.966666666667], [1.59607812E12, 23399.783333333333], [1.59607878E12, 19397.483333333334], [1.59607872E12, 20584.3], [1.59607842E12, 12433.2], [1.59607836E12, 11739.116666666667], [1.59607806E12, 23954.35], [1.596078E12, 19512.066666666666], [1.59607866E12, 15542.216666666667], [1.5960786E12, 19449.633333333335], [1.5960783E12, 15351.783333333333], [1.59607824E12, 26203.916666666668], [1.59607794E12, 24560.583333333332]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59607884E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 723.6018718502511, "minX": 1.59607794E12, "maxY": 2170.0, "series": [{"data": [[1.59607884E12, 1062.8097826086955], [1.59607854E12, 844.6430594900852], [1.59607848E12, 1309.2431289640576], [1.59607818E12, 1093.148250460407], [1.59607812E12, 908.1421012849592], [1.59607878E12, 1095.1121239744753], [1.59607872E12, 1036.702749140893], [1.59607842E12, 1654.364153627311], [1.59607836E12, 1861.1777108433741], [1.59607806E12, 890.5778597785978], [1.596078E12, 1080.4242973708047], [1.59607866E12, 1359.7212741752], [1.5960786E12, 1095.2781818181838], [1.5960783E12, 1335.501152073732], [1.59607824E12, 819.5836707152487], [1.59607794E12, 723.6018718502511]], "isOverall": false, "label": "Search for Test", "isController": false}, {"data": [[1.59607794E12, 2170.0]], "isOverall": false, "label": "Get Access Token ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59607884E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 566.3902087832978, "minX": 1.59607794E12, "maxY": 2168.0, "series": [{"data": [[1.59607884E12, 833.5434782608695], [1.59607854E12, 644.0856940509918], [1.59607848E12, 959.7452431289636], [1.59607818E12, 771.577348066298], [1.59607812E12, 671.3552532123965], [1.59607878E12, 782.0902461257978], [1.59607872E12, 740.156357388316], [1.59607842E12, 1166.694167852064], [1.59607836E12, 1107.486445783132], [1.59607806E12, 641.7121771217705], [1.596078E12, 722.2348141432456], [1.59607866E12, 966.9408418657565], [1.5960786E12, 808.957272727273], [1.5960783E12, 937.9228110599074], [1.59607824E12, 616.8225371120111], [1.59607794E12, 566.3902087832978]], "isOverall": false, "label": "Search for Test", "isController": false}, {"data": [[1.59607794E12, 2168.0]], "isOverall": false, "label": "Get Access Token ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59607884E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 55.31101511879056, "minX": 1.59607794E12, "maxY": 1606.0, "series": [{"data": [[1.59607884E12, 77.1521739130435], [1.59607854E12, 85.8753541076487], [1.59607848E12, 206.09725158562355], [1.59607818E12, 82.71086556169426], [1.59607812E12, 76.76870748299316], [1.59607878E12, 114.55697356426622], [1.59607872E12, 108.1400343642611], [1.59607842E12, 155.69132290184916], [1.59607836E12, 163.4156626506024], [1.59607806E12, 73.97785977859779], [1.596078E12, 58.11242067089748], [1.59607866E12, 138.84527872582498], [1.5960786E12, 130.78727272727278], [1.5960783E12, 98.64170506912437], [1.59607824E12, 97.02631578947368], [1.59607794E12, 55.31101511879056]], "isOverall": false, "label": "Search for Test", "isController": false}, {"data": [[1.59607794E12, 1606.0]], "isOverall": false, "label": "Get Access Token ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59607884E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 275.0, "minX": 1.59607794E12, "maxY": 21760.0, "series": [{"data": [[1.59607884E12, 3786.0], [1.59607854E12, 4140.0], [1.59607848E12, 12059.0], [1.59607818E12, 8154.0], [1.59607812E12, 7145.0], [1.59607878E12, 7010.0], [1.59607872E12, 8079.0], [1.59607842E12, 21760.0], [1.59607836E12, 13940.0], [1.59607806E12, 6782.0], [1.596078E12, 10813.0], [1.59607866E12, 16592.0], [1.5960786E12, 9637.0], [1.5960783E12, 14780.0], [1.59607824E12, 8493.0], [1.59607794E12, 4985.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.59607884E12, 292.29999911785126], [1.59607854E12, 280.0], [1.59607848E12, 280.5229997742176], [1.59607818E12, 279.0], [1.59607812E12, 281.0], [1.59607878E12, 282.0], [1.59607872E12, 281.0], [1.59607842E12, 286.0], [1.59607836E12, 284.0], [1.59607806E12, 279.2039996767044], [1.596078E12, 278.9359997367859], [1.59607866E12, 282.91999979019164], [1.5960786E12, 282.0], [1.5960783E12, 280.0], [1.59607824E12, 280.0], [1.59607794E12, 278.51899966835975]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.59607884E12, 295.6300003528595], [1.59607854E12, 280.0], [1.59607848E12, 281.375300090313], [1.59607818E12, 279.0], [1.59607812E12, 281.1076001262665], [1.59607878E12, 282.87020010471343], [1.59607872E12, 281.0], [1.59607842E12, 286.0], [1.59607836E12, 284.58350006341936], [1.59607806E12, 280.0], [1.596078E12, 279.0], [1.59607866E12, 283.71200008392333], [1.5960786E12, 282.0], [1.5960783E12, 280.6031000828743], [1.59607824E12, 280.0], [1.59607794E12, 279.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.59607884E12, 294.14999955892563], [1.59607854E12, 280.0], [1.59607848E12, 280.9964998871088], [1.59607818E12, 279.0], [1.59607812E12, 281.0], [1.59607878E12, 282.4309998691082], [1.59607872E12, 281.0], [1.59607842E12, 286.0], [1.59607836E12, 284.3174999207258], [1.59607806E12, 279.8819998383522], [1.596078E12, 279.0], [1.59607866E12, 283.3599998950958], [1.5960786E12, 282.0], [1.5960783E12, 280.2554998964071], [1.59607824E12, 280.0], [1.59607794E12, 279.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.59607884E12, 279.0], [1.59607854E12, 278.0], [1.59607848E12, 278.0], [1.59607818E12, 276.0], [1.59607812E12, 275.0], [1.59607878E12, 277.0], [1.59607872E12, 278.0], [1.59607842E12, 278.0], [1.59607836E12, 279.0], [1.59607806E12, 277.0], [1.596078E12, 277.0], [1.59607866E12, 276.0], [1.5960786E12, 276.0], [1.5960783E12, 276.0], [1.59607824E12, 277.0], [1.59607794E12, 276.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.59607884E12, 927.5], [1.59607854E12, 701.5], [1.59607848E12, 710.5], [1.59607818E12, 730.0], [1.59607812E12, 710.0], [1.59607878E12, 765.0], [1.59607872E12, 737.5], [1.59607842E12, 1047.0], [1.59607836E12, 1253.0], [1.59607806E12, 685.0], [1.596078E12, 728.0], [1.59607866E12, 793.0], [1.5960786E12, 791.5], [1.5960783E12, 948.5], [1.59607824E12, 601.0], [1.59607794E12, 558.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59607884E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 296.5, "minX": 1.0, "maxY": 2338.5, "series": [{"data": [[2.0, 1994.5], [3.0, 2116.0], [4.0, 2114.0], [5.0, 2110.0], [6.0, 2338.5], [7.0, 1995.0], [8.0, 1815.0], [9.0, 1548.0], [10.0, 1411.5], [11.0, 1279.0], [12.0, 1443.5], [13.0, 1483.0], [14.0, 1100.5], [15.0, 1255.0], [16.0, 1261.5], [17.0, 980.0], [18.0, 875.0], [19.0, 974.5], [20.0, 833.0], [21.0, 737.5], [22.0, 835.5], [23.0, 729.0], [24.0, 871.5], [25.0, 782.0], [26.0, 686.0], [27.0, 750.0], [28.0, 703.0], [29.0, 687.0], [30.0, 595.5], [31.0, 559.0], [32.0, 520.0], [33.0, 569.5], [34.0, 589.5], [35.0, 500.0], [37.0, 491.0], [36.0, 535.0], [39.0, 486.0], [38.0, 493.0], [41.0, 487.5], [40.0, 493.5], [43.0, 360.0], [42.0, 495.0], [45.0, 376.0], [44.0, 326.0], [46.0, 486.5], [47.0, 308.0], [48.0, 391.5], [49.0, 299.0], [51.0, 314.0], [50.0, 315.5], [52.0, 296.5], [53.0, 339.0], [54.0, 304.5], [1.0, 2111.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 54.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 296.0, "minX": 1.0, "maxY": 1453.0, "series": [{"data": [[2.0, 1192.5], [3.0, 1453.0], [4.0, 1449.0], [5.0, 1282.0], [6.0, 1331.0], [7.0, 1129.0], [8.0, 1289.0], [9.0, 1124.0], [10.0, 978.0], [11.0, 791.0], [12.0, 1106.5], [13.0, 1013.0], [14.0, 836.5], [15.0, 893.0], [16.0, 897.5], [17.0, 722.0], [18.0, 665.0], [19.0, 669.5], [20.0, 609.5], [21.0, 612.5], [22.0, 618.0], [23.0, 531.5], [24.0, 615.5], [25.0, 539.5], [26.0, 475.0], [27.0, 523.5], [28.0, 487.0], [29.0, 497.0], [30.0, 481.0], [31.0, 464.0], [32.0, 460.0], [33.0, 462.5], [34.0, 469.0], [35.0, 454.0], [37.0, 448.0], [36.0, 463.5], [39.0, 451.0], [38.0, 452.5], [41.0, 448.0], [40.0, 457.0], [43.0, 336.0], [42.0, 453.0], [45.0, 357.0], [44.0, 299.5], [46.0, 445.5], [47.0, 300.5], [48.0, 377.5], [49.0, 297.0], [51.0, 305.0], [50.0, 298.5], [52.0, 296.0], [53.0, 334.0], [54.0, 297.5], [1.0, 1343.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 54.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.7333333333333334, "minX": 1.59607794E12, "maxY": 24.7, "series": [{"data": [[1.59607884E12, 2.7333333333333334], [1.59607854E12, 23.533333333333335], [1.59607848E12, 15.766666666666667], [1.59607818E12, 18.1], [1.59607812E12, 22.05], [1.59607878E12, 18.283333333333335], [1.59607872E12, 19.4], [1.59607842E12, 11.716666666666667], [1.59607836E12, 11.066666666666666], [1.59607806E12, 22.583333333333332], [1.596078E12, 18.383333333333333], [1.59607866E12, 14.65], [1.5960786E12, 18.333333333333332], [1.5960783E12, 14.466666666666667], [1.59607824E12, 24.7], [1.59607794E12, 23.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59607884E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 3.066666666666667, "minX": 1.59607794E12, "maxY": 24.7, "series": [{"data": [[1.59607884E12, 3.066666666666667], [1.59607854E12, 23.533333333333335], [1.59607848E12, 15.766666666666667], [1.59607818E12, 18.1], [1.59607812E12, 22.05], [1.59607878E12, 18.283333333333335], [1.59607872E12, 19.4], [1.59607842E12, 11.716666666666667], [1.59607836E12, 11.066666666666666], [1.59607806E12, 22.583333333333332], [1.596078E12, 18.383333333333333], [1.59607866E12, 14.65], [1.5960786E12, 18.333333333333332], [1.5960783E12, 14.466666666666667], [1.59607824E12, 24.7], [1.59607794E12, 23.166666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59607884E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.59607794E12, "maxY": 24.7, "series": [{"data": [[1.59607884E12, 3.066666666666667], [1.59607854E12, 23.533333333333335], [1.59607848E12, 15.766666666666667], [1.59607818E12, 18.1], [1.59607812E12, 22.05], [1.59607878E12, 18.283333333333335], [1.59607872E12, 19.4], [1.59607842E12, 11.716666666666667], [1.59607836E12, 11.066666666666666], [1.59607806E12, 22.583333333333332], [1.596078E12, 18.383333333333333], [1.59607866E12, 14.65], [1.5960786E12, 18.333333333333332], [1.5960783E12, 14.466666666666667], [1.59607824E12, 24.7], [1.59607794E12, 23.15]], "isOverall": false, "label": "Search for Test-success", "isController": false}, {"data": [[1.59607794E12, 0.016666666666666666]], "isOverall": false, "label": "Get Access Token -success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59607884E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 3.066666666666667, "minX": 1.59607794E12, "maxY": 24.7, "series": [{"data": [[1.59607884E12, 3.066666666666667], [1.59607854E12, 23.533333333333335], [1.59607848E12, 15.766666666666667], [1.59607818E12, 18.1], [1.59607812E12, 22.05], [1.59607878E12, 18.283333333333335], [1.59607872E12, 19.4], [1.59607842E12, 11.716666666666667], [1.59607836E12, 11.066666666666666], [1.59607806E12, 22.583333333333332], [1.596078E12, 18.383333333333333], [1.59607866E12, 14.65], [1.5960786E12, 18.333333333333332], [1.5960783E12, 14.466666666666667], [1.59607824E12, 24.7], [1.59607794E12, 23.166666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59607884E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

